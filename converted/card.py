class Card(Moveable):

    def __init__(self, X, Y, W, H, card, center, params):
        self.params = (type(params) == 'table') & params if (type(params) == 'table') & params else {}
        super().__init__(self, X, Y, W, H)
        self.CT = self.VT
        self.config = {'card': card if card else {}, 'center': center}
        self.tilt_var = {'mx': 0, 'my': 0, 'dx': 0, 'dy': 0, 'amt': 0}
        self.ambient_tilt = 0.2
        self.states.collide.can = True
        self.states.hover.can = True
        self.states.drag.can = True
        self.states.click.can = True
        self.playing_card = self.params.playing_card
        G.sort_id = (G.sort_id if G.sort_id else 0) + 1
        self.sort_id = G.sort_id
        if self.params.viewed_back:
            self.back = 'viewed_back'
        else:
            self.back = 'selected_back'
        self.bypass_discovery_center = self.params.bypass_discovery_center
        self.bypass_discovery_ui = self.params.bypass_discovery_ui
        self.bypass_lock = self.params.bypass_lock
        self.no_ui = self.config.card & self.config.card.no_ui
        self.children = {}
        self.base_cost = 0
        self.extra_cost = 0
        self.cost = 0
        self.sell_cost = 0
        self.sell_cost_label = 0
        self.children.shadow = Moveable(0, 0, 0, 0)
        self.unique_val = 1 - self.ID / 1603301
        self.edition = 'None'
        self.zoom = Trueself.set_ability(center, True)self.set_base(card, True)
        self.discard_pos = {'r': 3.6 * (math.random() - 0.5), 'x': math.random(), 'y': math.random()}
        self.facing = 'front'
        self.sprite_facing = 'front'
        self.flipping = 'None'
        self.area = 'None'
        self.highlighted = False
        self.click_timeout = 0.3
        self.T.scale = 0.95
        self.debuff = False
        self.rank = 'None'
        self.added_to_deck = 'None'
        if self.children.front:
            self.children.front.VT.w = 0
        self.children.back.VT.w = 0
        self.children.center.VT.w = 0
        if self.children.front:
            self.children.front.parent = self';'
            self.children.front.layered_parallax = 'None'
        self.children.back.parent = self';'
        self.children.back.layered_parallax = 'None'
        self.children.center.parent = self';'
        self.children.center.layered_parallax = 'None'self.set_cost()
        if getmetatable(self) == Card:table.insert()

    def update_alert(self):
        if (((self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Voucher') if (self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Voucher') else self.ability.consumeable) if ((self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Voucher') if (self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Voucher') else self.ability.consumeable) else self.ability.set == 'Edition') if (((self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Voucher') if (self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Voucher') else self.ability.consumeable) if ((self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Voucher') if (self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Voucher') else self.ability.consumeable) else self.ability.set == 'Edition') else self.ability.set == 'Booster':
            if self.area & self.area.config.collection & self.config.center:
                if self.config.center.alerted & self.children.alert:self.children.alert.remove()
                    self.children.alert = 'None'
                elif (not self.config.center.alerted) & (not self.children.alert) & self.config.center.discovered:
                    self.children.alert = UIBox()

    def set_base(self, card, initial):
        card = card if card else {}
        self.config.card = card
        for kv in pairs():
            if card == v:
                self.config.card_key = k
        if next(card):self.set_sprites(None, card)
        suit_base_nominal_original = 'None'
        if self.base & self.base.suit_nominal_original:
            suit_base_nominal_original = self.base.suit_nominal_original
        self.base = {'name': self.config.card.name, 'suit': self.config.card.suit, 'value': self.config.card.value, 'nominal': 0, 'suit_nominal': 0, 'face_nominal': 0, 'colour': 'self.config.card.suit[G.C.SUITS]', 'times_played': 0}
        if self.base.value == '2':
            self.base.nominal = 2';'
            self.base.id = 2
        elif self.base.value == '3':
            self.base.nominal = 3';'
            self.base.id = 3
        elif self.base.value == '4':
            self.base.nominal = 4';'
            self.base.id = 4
        elif self.base.value == '5':
            self.base.nominal = 5';'
            self.base.id = 5
        elif self.base.value == '6':
            self.base.nominal = 6';'
            self.base.id = 6
        elif self.base.value == '7':
            self.base.nominal = 7';'
            self.base.id = 7
        elif self.base.value == '8':
            self.base.nominal = 8';'
            self.base.id = 8
        elif self.base.value == '9':
            self.base.nominal = 9';'
            self.base.id = 9
        elif self.base.value == '10':
            self.base.nominal = 10';'
            self.base.id = 10
        elif self.base.value == 'Jack':
            self.base.nominal = 10';'
            self.base.face_nominal = 0.1';'
            self.base.id = 11
        elif self.base.value == 'Queen':
            self.base.nominal = 10';'
            self.base.face_nominal = 0.2';'
            self.base.id = 12
        elif self.base.value == 'King':
            self.base.nominal = 10';'
            self.base.face_nominal = 0.3';'
            self.base.id = 13
        elif self.base.value == 'Ace':
            self.base.nominal = 11';'
            self.base.face_nominal = 0.4';'
            self.base.id = 14
        if initial:
            self.base.original_value = self.base.value
        if self.base.suit == 'Diamonds':
            self.base.suit_nominal = 0.01';'
            self.base.suit_nominal_original = suit_base_nominal_original if suit_base_nominal_original else 0.001
        elif self.base.suit == 'Clubs':
            self.base.suit_nominal = 0.02';'
            self.base.suit_nominal_original = suit_base_nominal_original if suit_base_nominal_original else 0.002
        elif self.base.suit == 'Hearts':
            self.base.suit_nominal = 0.03';'
            self.base.suit_nominal_original = suit_base_nominal_original if suit_base_nominal_original else 0.003
        elif self.base.suit == 'Spades':
            self.base.suit_nominal = 0.04';'
            self.base.suit_nominal_original = suit_base_nominal_original if suit_base_nominal_original else 0.004
        if not initial:G.GAME.blind.debuff_card(self)
        if self.playing_card & (not initial):check_for_unlock()

    def set_sprites(self, _center, _front):
        if _front:
            if self.children.front:
                self.children.front.atlas = '_front.atlas[G.ASSET_ATLAS]' if '_front.atlas[G.ASSET_ATLAS]' else '"cards_"..G.SETTINGS.colourblind_option and 2 or 1[G.ASSET_ATLAS]'self.children.front.set_sprite_pos()
            else:
                self.children.front = Sprite()
                self.children.front.states.hover = self.states.hover
                self.children.front.states.click = self.states.click
                self.children.front.states.drag = self.states.drag
                self.children.front.states.collide.can = Falseself.children.front.set_role()
        if _center:
            if _center.set:
                if self.children.center:
                    self.children.center.atlas = "_center.atlas or _center.set == 'Joker' or _center.consumeable or _center.set == 'Voucher' and _center.set or 'centers'[G.ASSET_ATLAS]"self.children.center.set_sprite_pos()
                else:
                    if (_center.set == 'Joker') & (not _center.unlocked) & (not self.params.bypass_discovery_center):
                        self.children.center = Sprite()
                    elif (self.config.center.set == 'Voucher') & (not self.config.center.unlocked) & (not self.params.bypass_discovery_center):
                        self.children.center = Sprite()
                    elif self.config.center.consumeable & self.config.center.demo:
                        self.children.center = Sprite()
                    elif (not self.params.bypass_discovery_center) & ((((_center.set == 'Edition' if _center.set == 'Edition' else _center.set == 'Joker') if (_center.set == 'Edition' if _center.set == 'Edition' else _center.set == 'Joker') else _center.consumeable) if ((_center.set == 'Edition' if _center.set == 'Edition' else _center.set == 'Joker') if (_center.set == 'Edition' if _center.set == 'Edition' else _center.set == 'Joker') else _center.consumeable) else _center.set == 'Voucher') if (((_center.set == 'Edition' if _center.set == 'Edition' else _center.set == 'Joker') if (_center.set == 'Edition' if _center.set == 'Edition' else _center.set == 'Joker') else _center.consumeable) if ((_center.set == 'Edition' if _center.set == 'Edition' else _center.set == 'Joker') if (_center.set == 'Edition' if _center.set == 'Edition' else _center.set == 'Joker') else _center.consumeable) else _center.set == 'Voucher') else _center.set == 'Booster') & (not _center.discovered):
                        self.children.center = Sprite()
                    elif (_center.set == 'Joker' if _center.set == 'Joker' else _center.consumeable) if (_center.set == 'Joker' if _center.set == 'Joker' else _center.consumeable) else _center.set == 'Voucher':
                        self.children.center = Sprite()
                    else:
                        self.children.center = Sprite()
                    self.children.center.states.hover = self.states.hover
                    self.children.center.states.click = self.states.click
                    self.children.center.states.drag = self.states.drag
                    self.children.center.states.collide.can = Falseself.children.center.set_role()
                if (_center.name == 'Half Joker') & (_center.discovered if _center.discovered else self.bypass_discovery_center):
                    self.children.center.scale.y = self.children.center.scale.y / 1.7
                if (_center.name == 'Photograph') & (_center.discovered if _center.discovered else self.bypass_discovery_center):
                    self.children.center.scale.y = self.children.center.scale.y / 1.2
                if (_center.name == 'Square Joker') & (_center.discovered if _center.discovered else self.bypass_discovery_center):
                    self.children.center.scale.y = self.children.center.scale.x
            if _center.soul_pos:
                self.children.floating_sprite = Sprite()
                self.children.floating_sprite.role.draw_major = self
                self.children.floating_sprite.states.hover.can = False
                self.children.floating_sprite.states.click.can = False
            if not self.children.back:
                self.children.back = Sprite()
                self.children.back.states.hover = self.states.hover
                self.children.back.states.click = self.states.click
                self.children.back.states.drag = self.states.drag
                self.children.back.states.collide.can = Falseself.children.back.set_role()

    def set_ability(self, center, initial, delay_sprites):
        X = Y = W = H = (self.T.x, self.T.y, self.T.w, self.T.h)
        old_center = self.config.center
        self.config.center = center
        for kv in pairs():
            if center == v:
                self.config.center_key = k
        if self.params.discover & (not center.discovered):unlock_card(center)discover_card(center)
        if (center.name == 'Half Joker') & (center.discovered if center.discovered else self.bypass_discovery_center):
            H = H / 1.7
            self.T.h = H
        if (center.name == 'Photograph') & (center.discovered if center.discovered else self.bypass_discovery_center):
            H = H / 1.2
            self.T.h = H
        if (center.name == 'Square Joker') & (center.discovered if center.discovered else self.bypass_discovery_center):
            H = W
            self.T.h = H
        if (center.name == 'Wee Joker') & (center.discovered if center.discovered else self.bypass_discovery_center):
            H = H * 0.7
            W = W * 0.7
            self.T.h = H
            self.T.w = W
        if delay_sprites:G.E_MANAGER.add_event()
        else:self.set_sprites(center)
        if self.ability & old_center & old_center.config.bonus:
            self.ability.bonus = self.ability.bonus - old_center.config.bonus
        self.ability = {'name': center.name, 'effect': center.effect, 'set': center.set, 'mult': center.config.mult if center.config.mult else 0, 'h_mult': center.config.h_mult if center.config.h_mult else 0, 'h_x_mult': center.config.h_x_mult if center.config.h_x_mult else 0, 'h_dollars': center.config.h_dollars if center.config.h_dollars else 0, 'p_dollars': center.config.p_dollars if center.config.p_dollars else 0, 't_mult': center.config.t_mult if center.config.t_mult else 0, 't_chips': center.config.t_chips if center.config.t_chips else 0, 'x_mult': center.config.Xmult if center.config.Xmult else 1, 'h_size': center.config.h_size if center.config.h_size else 0, 'd_size': center.config.d_size if center.config.d_size else 0, 'extra': copy_table() if copy_table() else 'None', 'extra_value': 0, 'type': center.config.type if center.config.type else '', 'order': center.order if center.order else 'None', 'forced_selection': self.ability & self.ability.forced_selection if self.ability & self.ability.forced_selection else 'None', 'perma_bonus': self.ability & self.ability.perma_bonus if self.ability & self.ability.perma_bonus else 0}
        self.ability.bonus = (self.ability.bonus if self.ability.bonus else 0) + (center.config.bonus if center.config.bonus else 0)
        if center.consumeable:
            self.ability.consumeable = center.config
        if (self.ability.name == 'Gold Card') & (self.seal == 'Gold') & self.playing_card:check_for_unlock()
        if self.ability.name == 'Invisible Joker':
            self.ability.invis_rounds = 0
        if self.ability.name == 'To Do List':
            _poker_hands = {}
            for kv in pairs():
                if v.visible:
                    '#_poker_hands + 1[_poker_hands]' = k
            old_hand = self.ability.to_do_poker_hand
            self.ability.to_do_poker_hand = 'None'
            while not self.ability.to_do_poker_hand:
                self.ability.to_do_poker_hand = pseudorandom_element(_poker_hands)
                if self.ability.to_do_poker_hand == old_hand:
                    self.ability.to_do_poker_hand = 'None'
            else:
        if self.ability.name == 'Caino':
            self.ability.caino_xmult = 1
        if self.ability.name == 'Yorick':
            self.ability.yorick_discards = self.ability.extra.discards
        if self.ability.name == 'Loyalty Card':
            self.ability.burnt_hand = 0
            self.ability.loyalty_remaining = self.ability.extra.every
        self.base_cost = center.cost if center.cost else 1
        self.ability.hands_played_at_create = G.GAME & G.GAME.hands_played if G.GAME & G.GAME.hands_played else 0
        self.label = (center.label if center.label else self.config.card.label) if (center.label if center.label else self.config.card.label) else self.ability.set
        if self.ability.set == 'Joker':
            self.label = self.ability.name
        if self.ability.set == 'Edition':
            self.label = self.ability.name
        if self.ability.consumeable:
            self.label = self.ability.name
        if self.ability.set == 'Voucher':
            self.label = self.ability.name
        if self.ability.set == 'Booster':
            self.label = self.ability.name
            self.mouse_damping = 1.5
        if not G.OVERLAY_MENU:
            for kv in pairs():
                if v.name == self.ability.name:
                    'k[G.GAME.used_jokers]' = True
        if G.jokers & (self.area == G.jokers):check_for_unlock()
        if G.consumeables & (self.area == G.consumeables):check_for_unlock()
        if not initial:G.GAME.blind.debuff_card(self)
        if self.playing_card & (not initial):check_for_unlock()

    def set_cost(self):
        self.extra_cost = 0 + G.GAME.inflation
        if self.edition:
            self.extra_cost = self.extra_cost + (self.edition.holo & 3 if self.edition.holo & 3 else 0) + (self.edition.foil & 2 if self.edition.foil & 2 else 0) + (self.edition.polychrome & 5 if self.edition.polychrome & 5 else 0) + (self.edition.negative & 5 if self.edition.negative & 5 else 0)
        self.cost = math.max(1)
        if (self.ability.set == 'Booster') & G.GAME.modifiers.booster_ante_scaling:
            self.cost = self.cost + G.GAME.round_resets.ante - 1
        if (self.ability.set == 'Booster') & (not G.SETTINGS.tutorial_complete) & G.SETTINGS.tutorial_progress & (not "'shop_1'[G.SETTINGS.tutorial_progress.completed_parts]"):
            self.cost = self.cost + 3
        if (self.ability.set == 'Planet' if self.ability.set == 'Planet' else (self.ability.set == 'Booster') & self.ability.name.find(Celestial)) & len(find_joker(Astronomer) > 0):
            self.cost = 0
        if self.ability.rental:
            self.cost = 1
        self.sell_cost = math.max(1) + (self.ability.extra_value if self.ability.extra_value else 0)
        if self.area & self.ability.couponed & (self.area == G.shop_jokers if self.area == G.shop_jokers else self.area == G.shop_booster):
            self.cost = 0
        self.sell_cost_label = (self.facing == 'back') & '?' if (self.facing == 'back') & '?' else self.sell_cost

    def set_edition(self, edition, immediate, silent):
        self.edition = 'None'
        if not edition:
            return False
        if edition.holo:
            if not self.edition:
                self.edition = {}
            self.edition.mult = G.P_CENTERS.e_holo.config.extra
            self.edition.holo = True
            self.edition.type = 'holo'
        elif edition.foil:
            if not self.edition:
                self.edition = {}
            self.edition.chips = G.P_CENTERS.e_foil.config.extra
            self.edition.foil = True
            self.edition.type = 'foil'
        elif edition.polychrome:
            if not self.edition:
                self.edition = {}
            self.edition.x_mult = G.P_CENTERS.e_polychrome.config.extra
            self.edition.polychrome = True
            self.edition.type = 'polychrome'
        elif edition.negative:
            if not self.edition:
                self.edition = {}
                if self.added_to_deck:
                    if self.ability.consumeable:
                        G.consumeables.config.card_limit = G.consumeables.config.card_limit + 1
                    else:
                        G.jokers.config.card_limit = G.jokers.config.card_limit + 1
            self.edition.negative = True
            self.edition.type = 'negative'
        if self.area & (self.area == G.jokers):
            if self.edition:
                if not "'e_'..self.edition.type[G.P_CENTERS]".discovered:discover_card('e_'..self.edition.type[G.P_CENTERS])
            elif not "'e_base'[G.P_CENTERS]".discovered:discover_card('e_base'[G.P_CENTERS])
        if self.edition & (not silent):
            G.CONTROLLER.locks.edition = TrueG.E_MANAGER.add_event()G.E_MANAGER.add_event()
        if G.jokers & (self.area == G.jokers):check_for_unlock()self.set_cost()

    def set_seal(self, _seal, silent, immediate):
        self.seal = 'None'
        if _seal:
            self.seal = _seal
            if not silent:
                G.CONTROLLER.locks.seal = True
                if immediate:self.juice_up(0.3, 0.3)play_sound(gold_seal, 1.2, 0.4)
                    G.CONTROLLER.locks.seal = False
                else:G.E_MANAGER.add_event()G.E_MANAGER.add_event()
        if (self.ability.name == 'Gold Card') & (self.seal == 'Gold') & self.playing_card:check_for_unlock()self.set_cost()

    def get_seal(self, bypass_debuff):
        if self.debuff & (not bypass_debuff):
            return False
        return self.seal

    def set_eternal(self, _eternal):
        self.ability.eternal = 'None'
        if self.config.center.eternal_compat & (not self.ability.perishable):
            self.ability.eternal = _eternal

    def set_perishable(self, _perishable):
        self.ability.perishable = 'None'
        if self.config.center.perishable_compat & (not self.ability.eternal):
            self.ability.perishable = True
            self.ability.perish_tally = G.GAME.perishable_rounds

    def set_rental(self, _rental):
        self.ability.rental = _rentalself.set_cost()

    def set_debuff(self, should_debuff):
        if self.ability.perishable & (self.ability.perish_tally <= 0):
            if not self.debuff:
                self.debuff = True
                if self.area == G.jokers:self.remove_from_deck(True)
            return False
        if should_debuff != self.debuff:
            if self.area == G.jokers:
                if should_debuff:self.remove_from_deck(True)
                else:self.add_to_deck(True)
            self.debuff = should_debuff

    def remove_UI(self):
        self.ability_UIBox_table = 'None'
        self.config.h_popup = 'None'
        self.config.h_popup_config = 'None'
        self.no_ui = True

    def change_suit(self, new_suit):
        new_code = (((new_suit == 'Diamonds') & 'D_' if (new_suit == 'Diamonds') & 'D_' else (new_suit == 'Spades') & 'S_') if ((new_suit == 'Diamonds') & 'D_' if (new_suit == 'Diamonds') & 'D_' else (new_suit == 'Spades') & 'S_') else (new_suit == 'Clubs') & 'C_') if (((new_suit == 'Diamonds') & 'D_' if (new_suit == 'Diamonds') & 'D_' else (new_suit == 'Spades') & 'S_') if ((new_suit == 'Diamonds') & 'D_' if (new_suit == 'Diamonds') & 'D_' else (new_suit == 'Spades') & 'S_') else (new_suit == 'Clubs') & 'C_') else (new_suit == 'Hearts') & 'H_'
        new_val = (((((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') if ((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') else (self.base.value == 'Queen') & 'Q') if (((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') if ((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') else (self.base.value == 'Queen') & 'Q') else (self.base.value == 'Jack') & 'J') if ((((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') if ((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') else (self.base.value == 'Queen') & 'Q') if (((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') if ((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') else (self.base.value == 'Queen') & 'Q') else (self.base.value == 'Jack') & 'J') else (self.base.value == '10') & 'T') if (((((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') if ((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') else (self.base.value == 'Queen') & 'Q') if (((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') if ((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') else (self.base.value == 'Queen') & 'Q') else (self.base.value == 'Jack') & 'J') if ((((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') if ((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') else (self.base.value == 'Queen') & 'Q') if (((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') if ((self.base.value == 'Ace') & 'A' if (self.base.value == 'Ace') & 'A' else (self.base.value == 'King') & 'K') else (self.base.value == 'Queen') & 'Q') else (self.base.value == 'Jack') & 'J') else (self.base.value == '10') & 'T') else self.base.value
        new_card = 'new_code..new_val[G.P_CARDS]'self.set_base(new_card)G.GAME.blind.debuff_card(self)

    def add_to_deck(self, from_debuff):
        if not self.config.center.discovered:discover_card()
        if not self.added_to_deck:
            self.added_to_deck = True
            if self.ability.set == 'Enhanced' if self.ability.set == 'Enhanced' else self.ability.set == 'Default':
                if (self.ability.name == 'Gold Card') & (self.seal == 'Gold') & self.playing_card:check_for_unlock()
                return False
            if self.edition:
                if not "'e_'..self.edition.type[G.P_CENTERS]".discovered:discover_card('e_'..self.edition.type[G.P_CENTERS])
            elif not "'e_base'[G.P_CENTERS]".discovered:discover_card('e_base'[G.P_CENTERS])
            if self.ability.h_size != 0:G.hand.change_size()
            if self.ability.d_size > 0:
                G.GAME.round_resets.discards = G.GAME.round_resets.discards + self.ability.d_sizeease_discard()
            if self.ability.name == 'Credit Card':
                G.GAME.bankrupt_at = G.GAME.bankrupt_at - self.ability.extra
            if (self.ability.name == 'Chicot') & G.GAME.blind & G.GAME.blind.boss & (not G.GAME.blind.disabled):G.GAME.blind.disable()play_sound(timpani)card_eval_status_text(self, extra, None, None, None)
            if self.ability.name == 'Chaos the Clown':
                G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls + 1calculate_reroll_cost(True)
            if self.ability.name == 'Turtle Bean':G.hand.change_size()
            if self.ability.name == 'Oops! All 6s':
                for kv in pairs():
                    'k[G.GAME.probabilities]' = v * 2
            if self.ability.name == 'To the Moon':
                G.GAME.interest_amount = G.GAME.interest_amount + self.ability.extra
            if self.ability.name == 'Astronomer':G.E_MANAGER.add_event()
            if self.ability.name == 'Troubadour':G.hand.change_size()
                G.GAME.round_resets.hands = G.GAME.round_resets.hands + self.ability.extra.h_plays
            if self.ability.name == 'Stuntman':G.hand.change_size()
            if self.edition & self.edition.negative:
                if from_debuff:
                    self.ability.queue_negative_removal = 'None'
                elif self.ability.consumeable:
                    G.consumeables.config.card_limit = G.consumeables.config.card_limit + 1
                else:
                    G.jokers.config.card_limit = G.jokers.config.card_limit + 1
            if G.GAME.blind:G.E_MANAGER.add_event()

    def remove_from_deck(self, from_debuff):
        if self.added_to_deck:
            self.added_to_deck = False
            if self.ability.h_size != 0:G.hand.change_size()
            if self.ability.d_size > 0:
                G.GAME.round_resets.discards = G.GAME.round_resets.discards - self.ability.d_sizeease_discard()
            if self.ability.name == 'Credit Card':
                G.GAME.bankrupt_at = G.GAME.bankrupt_at + self.ability.extra
            if self.ability.name == 'Chaos the Clown':
                G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls - 1calculate_reroll_cost(True)
            if self.ability.name == 'Turtle Bean':G.hand.change_size()
            if self.ability.name == 'Oops! All 6s':
                for kv in pairs():
                    'k[G.GAME.probabilities]' = v / 2
            if self.ability.name == 'To the Moon':
                G.GAME.interest_amount = G.GAME.interest_amount - self.ability.extra
            if self.ability.name == 'Astronomer':G.E_MANAGER.add_event()
            if self.ability.name == 'Troubadour':G.hand.change_size()
                G.GAME.round_resets.hands = G.GAME.round_resets.hands - self.ability.extra.h_plays
            if self.ability.name == 'Stuntman':G.hand.change_size()
            if self.edition & self.edition.negative & G.jokers:
                if from_debuff:
                    self.ability.queue_negative_removal = True
                elif self.ability.consumeable:
                    G.consumeables.config.card_limit = G.consumeables.config.card_limit - 1
                else:
                    G.jokers.config.card_limit = G.jokers.config.card_limit - 1
            if G.GAME.blind:G.E_MANAGER.add_event()

    def generate_UIBox_unlock_table(self, hidden):
        loc_vars = {'no_name': True, 'not_hidden': not hidden}
        return generate_card_ui()

    def generate_UIBox_ability_table(self):
        card_type = hide_desc = (self.ability.set if self.ability.set else 'None', 'None')
        loc_vars = 'None'
        main_start = main_end = ('None', 'None')
        no_badge = 'None'
        if (not self.bypass_lock) & (self.config.center.unlocked != False) & ((((self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Edition') if (self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Edition') else self.ability.consumeable) if ((self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Edition') if (self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Edition') else self.ability.consumeable) else self.ability.set == 'Voucher') if (((self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Edition') if (self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Edition') else self.ability.consumeable) if ((self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Edition') if (self.ability.set == 'Joker' if self.ability.set == 'Joker' else self.ability.set == 'Edition') else self.ability.consumeable) else self.ability.set == 'Voucher') else self.ability.set == 'Booster') & (not self.config.center.discovered) & ((self.area != G.jokers) & (self.area != G.consumeables) & self.area if (self.area != G.jokers) & (self.area != G.consumeables) & self.area else not self.area):
            card_type = 'Undiscovered'
        if (self.config.center.unlocked == False) & (not self.bypass_lock):
            card_type = 'Locked'
            if self.area & (self.area == G.shop_demo):
                loc_vars = {}';'
                no_badge = True
        elif (card_type == 'Undiscovered') & (not self.bypass_discovery_ui):
            hide_desc = True
        elif self.debuff:
            loc_vars = {'debuffed': True, 'playing_card': not not self.base.colour, 'value': self.base.value, 'suit': self.base.suit, 'colour': self.base.colour}
        elif card_type == 'Default' if card_type == 'Default' else card_type == 'Enhanced':
            loc_vars = {'playing_card': not not self.base.colour, 'value': self.base.value, 'suit': self.base.suit, 'colour': self.base.colour, 'nominal_chips': (self.base.nominal > 0) & self.base.nominal if (self.base.nominal > 0) & self.base.nominal else 'None', 'bonus_chips': (self.ability.bonus + (self.ability.perma_bonus if self.ability.perma_bonus else 0) > 0) & self.ability.bonus + (self.ability.perma_bonus if self.ability.perma_bonus else 0) if (self.ability.bonus + (self.ability.perma_bonus if self.ability.perma_bonus else 0) > 0) & self.ability.bonus + (self.ability.perma_bonus if self.ability.perma_bonus else 0) else 'None'}
        elif self.ability.set == 'Joker':
            if self.ability.name == 'Joker':
                loc_vars = {1: self.ability.mult}
            elif (((self.ability.name == 'Jolly Joker' if self.ability.name == 'Jolly Joker' else self.ability.name == 'Zany Joker') if (self.ability.name == 'Jolly Joker' if self.ability.name == 'Jolly Joker' else self.ability.name == 'Zany Joker') else self.ability.name == 'Mad Joker') if ((self.ability.name == 'Jolly Joker' if self.ability.name == 'Jolly Joker' else self.ability.name == 'Zany Joker') if (self.ability.name == 'Jolly Joker' if self.ability.name == 'Jolly Joker' else self.ability.name == 'Zany Joker') else self.ability.name == 'Mad Joker') else self.ability.name == 'Crazy Joker') if (((self.ability.name == 'Jolly Joker' if self.ability.name == 'Jolly Joker' else self.ability.name == 'Zany Joker') if (self.ability.name == 'Jolly Joker' if self.ability.name == 'Jolly Joker' else self.ability.name == 'Zany Joker') else self.ability.name == 'Mad Joker') if ((self.ability.name == 'Jolly Joker' if self.ability.name == 'Jolly Joker' else self.ability.name == 'Zany Joker') if (self.ability.name == 'Jolly Joker' if self.ability.name == 'Jolly Joker' else self.ability.name == 'Zany Joker') else self.ability.name == 'Mad Joker') else self.ability.name == 'Crazy Joker') else self.ability.name == 'Droll Joker':
                loc_vars = {1: self.ability.t_mult, 2: localize()}
            elif (((self.ability.name == 'Sly Joker' if self.ability.name == 'Sly Joker' else self.ability.name == 'Wily Joker') if (self.ability.name == 'Sly Joker' if self.ability.name == 'Sly Joker' else self.ability.name == 'Wily Joker') else self.ability.name == 'Clever Joker') if ((self.ability.name == 'Sly Joker' if self.ability.name == 'Sly Joker' else self.ability.name == 'Wily Joker') if (self.ability.name == 'Sly Joker' if self.ability.name == 'Sly Joker' else self.ability.name == 'Wily Joker') else self.ability.name == 'Clever Joker') else self.ability.name == 'Devious Joker') if (((self.ability.name == 'Sly Joker' if self.ability.name == 'Sly Joker' else self.ability.name == 'Wily Joker') if (self.ability.name == 'Sly Joker' if self.ability.name == 'Sly Joker' else self.ability.name == 'Wily Joker') else self.ability.name == 'Clever Joker') if ((self.ability.name == 'Sly Joker' if self.ability.name == 'Sly Joker' else self.ability.name == 'Wily Joker') if (self.ability.name == 'Sly Joker' if self.ability.name == 'Sly Joker' else self.ability.name == 'Wily Joker') else self.ability.name == 'Clever Joker') else self.ability.name == 'Devious Joker') else self.ability.name == 'Crafty Joker':
                loc_vars = {1: self.ability.t_chips, 2: localize()}
            elif self.ability.name == 'Half Joker':
                loc_vars = {1: self.ability.extra.mult, 2: self.ability.extra.size}
            elif self.ability.name == 'Fortune Teller':
                loc_vars = {1: self.ability.extra, 2: G.GAME.consumeable_usage_total & G.GAME.consumeable_usage_total.tarot if G.GAME.consumeable_usage_total & G.GAME.consumeable_usage_total.tarot else 0}
            elif self.ability.name == 'Steel Joker':
                loc_vars = {1: self.ability.extra, 2: 1 + self.ability.extra * (self.ability.steel_tally if self.ability.steel_tally else 0)}
            elif self.ability.name == 'Chaos the Clown':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Space Joker':
                loc_vars = {1: '' + (G.GAME & G.GAME.probabilities.normal if G.GAME & G.GAME.probabilities.normal else 1), 2: self.ability.extra}
            elif self.ability.name == 'Stone Joker':
                loc_vars = {1: self.ability.extra, 2: self.ability.extra * (self.ability.stone_tally if self.ability.stone_tally else 0)}
            elif self.ability.name == 'Drunkard':
                loc_vars = {1: self.ability.d_size}
            elif self.ability.name == 'Green Joker':
                loc_vars = {1: self.ability.extra.hand_add, 2: self.ability.extra.discard_sub, 3: self.ability.mult}
            elif self.ability.name == 'Credit Card':
                loc_vars = {1: self.ability.extra}
            elif ((self.ability.name == 'Greedy Joker' if self.ability.name == 'Greedy Joker' else self.ability.name == 'Lusty Joker') if (self.ability.name == 'Greedy Joker' if self.ability.name == 'Greedy Joker' else self.ability.name == 'Lusty Joker') else self.ability.name == 'Wrathful Joker') if ((self.ability.name == 'Greedy Joker' if self.ability.name == 'Greedy Joker' else self.ability.name == 'Lusty Joker') if (self.ability.name == 'Greedy Joker' if self.ability.name == 'Greedy Joker' else self.ability.name == 'Lusty Joker') else self.ability.name == 'Wrathful Joker') else self.ability.name == 'Gluttonous Joker':
                loc_vars = {1: self.ability.extra.s_mult, 2: localize()}
            elif self.ability.name == 'Blue Joker':
                loc_vars = {1: self.ability.extra, 2: self.ability.extra * (G.deck & G.deck.cards & len(G.deck.cards if G.deck.cards else 52))}
            elif self.ability.name == 'Sixth Sense':
                loc_vars = {}
            elif self.ability.name == 'Mime':
            elif self.ability.name == 'Hack':
                loc_vars = {1: self.ability.extra + 1}
            elif self.ability.name == 'Pareidolia':
            elif self.ability.name == 'Faceless Joker':
                loc_vars = {1: self.ability.extra.dollars, 2: self.ability.extra.faces}
            elif self.ability.name == 'Oops! All 6s':
            elif self.ability.name == 'Juggler':
                loc_vars = {1: self.ability.h_size}
            elif self.ability.name == 'Golden Joker':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Joker Stencil':
                loc_vars = {1: self.ability.x_mult}
            elif self.ability.name == 'Four Fingers':
            elif self.ability.name == 'Ceremonial Dagger':
                loc_vars = {1: self.ability.mult}
            elif self.ability.name == 'Banner':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Misprint':
                r_mults = {}
                for i in range(self.ability.extra.min, self.ability.extra.max, ):
                    '#r_mults + 1[r_mults]' = tostring(i)
                loc_mult = ' ' + localize(k_mult) + ' '
                main_start = {1: {'n': G.UIT.T, 'config': {'text': '  +', 'colour': G.C.MULT, 'scale': 0.32}}, 2: {'n': G.UIT.O, 'config': {'object': DynaText()}}, 3: {'n': G.UIT.O, 'config': {'object': DynaText()}}}
            elif self.ability.name == 'Mystic Summit':
                loc_vars = {1: self.ability.extra.mult, 2: self.ability.extra.d_remaining}
            elif self.ability.name == 'Marble Joker':
            elif self.ability.name == 'Loyalty Card':
                loc_vars = {1: self.ability.extra.Xmult, 2: self.ability.extra.every + 1, 3: localize()}
            elif self.ability.name == '8 Ball':
                loc_vars = {1: '' + (G.GAME & G.GAME.probabilities.normal if G.GAME & G.GAME.probabilities.normal else 1), 2: self.ability.extra}
            elif self.ability.name == 'Dusk':
                loc_vars = {1: self.ability.extra + 1}
            elif self.ability.name == 'Raised Fist':
            elif self.ability.name == 'Fibonacci':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Scary Face':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Abstract Joker':
                loc_vars = {1: self.ability.extra, 2: (G.jokers & G.jokers.cards & len(G.jokers.cards if G.jokers.cards else 0)) * self.ability.extra}
            elif self.ability.name == 'Delayed Gratification':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Gros Michel':
                loc_vars = {1: self.ability.extra.mult, 2: '' + (G.GAME & G.GAME.probabilities.normal if G.GAME & G.GAME.probabilities.normal else 1), 3: self.ability.extra.odds}
            elif self.ability.name == 'Even Steven':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Odd Todd':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Scholar':
                loc_vars = {1: self.ability.extra.mult, 2: self.ability.extra.chips}
            elif self.ability.name == 'Business Card':
                loc_vars = {1: '' + (G.GAME & G.GAME.probabilities.normal if G.GAME & G.GAME.probabilities.normal else 1), 2: self.ability.extra}
            elif self.ability.name == 'Supernova':
            elif self.ability.name == 'Spare Trousers':
                loc_vars = {1: self.ability.extra, 2: localize(Two Pair, poker_hands), 3: self.ability.mult}
            elif self.ability.name == 'Superposition':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Ride the Bus':
                loc_vars = {1: self.ability.extra, 2: self.ability.mult}
            elif self.ability.name == 'Egg':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Burglar':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Blackboard':
                loc_vars = {1: self.ability.extra, 2: localize(Spades, suits_plural), 3: localize(Clubs, suits_plural)}
            elif self.ability.name == 'Runner':
                loc_vars = {1: self.ability.extra.chips, 2: self.ability.extra.chip_mod}
            elif self.ability.name == 'Ice Cream':
                loc_vars = {1: self.ability.extra.chips, 2: self.ability.extra.chip_mod}
            elif self.ability.name == 'DNA':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Splash':
            elif self.ability.name == 'Constellation':
                loc_vars = {1: self.ability.extra, 2: self.ability.x_mult}
            elif self.ability.name == 'Hiker':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'To Do List':
                loc_vars = {1: self.ability.extra.dollars, 2: localize()}
            elif self.ability.name == 'Smeared Joker':
            elif self.ability.name == 'Blueprint':
                self.ability.blueprint_compat_ui = self.ability.blueprint_compat_ui if self.ability.blueprint_compat_ui else ''';'
                self.ability.blueprint_compat_check = 'None'
                main_end = self.area & (self.area == G.jokers) & {1: {'n': G.UIT.C, 'config': {'align': 'bm', 'minh': 0.4}, 'nodes': {1: {'n': G.UIT.C, 'config': {'ref_table': self, 'align': 'm', 'colour': G.C.JOKER_GREY, 'r': 0.05, 'padding': 0.06, 'func': 'blueprint_compat'}, 'nodes': {1: {'n': G.UIT.T, 'config': {'ref_table': self.ability, 'ref_value': 'blueprint_compat_ui', 'colour': G.C.UI.TEXT_LIGHT, 'scale': 0.32 * 0.8}}}}}}} if self.area & (self.area == G.jokers) & {1: {'n': G.UIT.C, 'config': {'align': 'bm', 'minh': 0.4}, 'nodes': {1: {'n': G.UIT.C, 'config': {'ref_table': self, 'align': 'm', 'colour': G.C.JOKER_GREY, 'r': 0.05, 'padding': 0.06, 'func': 'blueprint_compat'}, 'nodes': {1: {'n': G.UIT.T, 'config': {'ref_table': self.ability, 'ref_value': 'blueprint_compat_ui', 'colour': G.C.UI.TEXT_LIGHT, 'scale': 0.32 * 0.8}}}}}}} else 'None'
            elif self.ability.name == 'Cartomancer':
            elif self.ability.name == 'Astronomer':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Golden Ticket':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Mr. Bones':
            elif self.ability.name == 'Acrobat':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Sock and Buskin':
                loc_vars = {1: self.ability.extra + 1}
            elif self.ability.name == 'Swashbuckler':
                loc_vars = {1: self.ability.mult}
            elif self.ability.name == 'Troubadour':
                loc_vars = {1: self.ability.extra.h_size, 2: -self.ability.extra.h_plays}
            elif self.ability.name == 'Certificate':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Throwback':
                loc_vars = {1: self.ability.extra, 2: self.ability.x_mult}
            elif self.ability.name == 'Hanging Chad':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Rough Gem':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Bloodstone':
                loc_vars = {1: '' + (G.GAME & G.GAME.probabilities.normal if G.GAME & G.GAME.probabilities.normal else 1), 2: self.ability.extra.odds, 3: self.ability.extra.Xmult}
            elif self.ability.name == 'Arrowhead':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Onyx Agate':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Glass Joker':
                loc_vars = {1: self.ability.extra, 2: self.ability.x_mult}
            elif self.ability.name == 'Showman':
            elif self.ability.name == 'Flower Pot':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Wee Joker':
                loc_vars = {1: self.ability.extra.chips, 2: self.ability.extra.chip_mod}
            elif self.ability.name == 'Merry Andy':
                loc_vars = {1: self.ability.d_size, 2: self.ability.h_size}
            elif self.ability.name == 'The Idol':
                loc_vars = {1: self.ability.extra, 2: localize(), 3: localize(), 'colours': {1: 'G.GAME.current_round.idol_card.suit[G.C.SUITS]'}}
            elif self.ability.name == 'Seeing Double':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Matador':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Hit the Road':
                loc_vars = {1: self.ability.extra, 2: self.ability.x_mult}
            elif (((self.ability.name == 'The Duo' if self.ability.name == 'The Duo' else self.ability.name == 'The Trio') if (self.ability.name == 'The Duo' if self.ability.name == 'The Duo' else self.ability.name == 'The Trio') else self.ability.name == 'The Family') if ((self.ability.name == 'The Duo' if self.ability.name == 'The Duo' else self.ability.name == 'The Trio') if (self.ability.name == 'The Duo' if self.ability.name == 'The Duo' else self.ability.name == 'The Trio') else self.ability.name == 'The Family') else self.ability.name == 'The Order') if (((self.ability.name == 'The Duo' if self.ability.name == 'The Duo' else self.ability.name == 'The Trio') if (self.ability.name == 'The Duo' if self.ability.name == 'The Duo' else self.ability.name == 'The Trio') else self.ability.name == 'The Family') if ((self.ability.name == 'The Duo' if self.ability.name == 'The Duo' else self.ability.name == 'The Trio') if (self.ability.name == 'The Duo' if self.ability.name == 'The Duo' else self.ability.name == 'The Trio') else self.ability.name == 'The Family') else self.ability.name == 'The Order') else self.ability.name == 'The Tribe':
                loc_vars = {1: self.ability.x_mult, 2: localize()}
            elif self.ability.name == 'Cavendish':
                loc_vars = {1: self.ability.extra.Xmult, 2: '' + (G.GAME & G.GAME.probabilities.normal if G.GAME & G.GAME.probabilities.normal else 1), 3: self.ability.extra.odds}
            elif self.ability.name == 'Card Sharp':
                loc_vars = {1: self.ability.extra.Xmult}
            elif self.ability.name == 'Red Card':
                loc_vars = {1: self.ability.extra, 2: self.ability.mult}
            elif self.ability.name == 'Madness':
                loc_vars = {1: self.ability.extra, 2: self.ability.x_mult}
            elif self.ability.name == 'Square Joker':
                loc_vars = {1: self.ability.extra.chips, 2: self.ability.extra.chip_mod}
            elif self.ability.name == 'Seance':
                loc_vars = {1: localize()}
            elif self.ability.name == 'Riff-raff':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Vampire':
                loc_vars = {1: self.ability.extra, 2: self.ability.x_mult}
            elif self.ability.name == 'Shortcut':
            elif self.ability.name == 'Hologram':
                loc_vars = {1: self.ability.extra, 2: self.ability.x_mult}
            elif self.ability.name == 'Vagabond':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Baron':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Cloud 9':
                loc_vars = {1: self.ability.extra, 2: self.ability.extra * (self.ability.nine_tally if self.ability.nine_tally else 0)}
            elif self.ability.name == 'Rocket':
                loc_vars = {1: self.ability.extra.dollars, 2: self.ability.extra.increase}
            elif self.ability.name == 'Obelisk':
                loc_vars = {1: self.ability.extra, 2: self.ability.x_mult}
            elif self.ability.name == 'Midas Mask':
            elif self.ability.name == 'Luchador':
                has_message = G.GAME & self.area & (self.area == G.jokers)
                if has_message:
                    disableable = G.GAME.blind & ((not G.GAME.blind.disabled) & (G.GAME.blind.get_type() == 'Boss'))
                    main_end = {1: {'n': G.UIT.C, 'config': {'align': 'bm', 'minh': 0.4}, 'nodes': {1: {'n': G.UIT.C, 'config': {'ref_table': self, 'align': 'm', 'colour': disableable & G.C.GREEN if disableable & G.C.GREEN else G.C.RED, 'r': 0.05, 'padding': 0.06}, 'nodes': {1: {'n': G.UIT.T, 'config': {'text': ' ' + localize() + ' ', 'colour': G.C.UI.TEXT_LIGHT, 'scale': 0.32 * 0.9}}}}}}}
            elif self.ability.name == 'Photograph':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Gift Card':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Turtle Bean':
                loc_vars = {1: self.ability.extra.h_size, 2: self.ability.extra.h_mod}
            elif self.ability.name == 'Erosion':
                loc_vars = {1: self.ability.extra, 2: math.max(0), 3: G.GAME.starting_deck_size}
            elif self.ability.name == 'Reserved Parking':
                loc_vars = {1: self.ability.extra.dollars, 2: '' + (G.GAME & G.GAME.probabilities.normal if G.GAME & G.GAME.probabilities.normal else 1), 3: self.ability.extra.odds}
            elif self.ability.name == 'Mail-In Rebate':
                loc_vars = {1: self.ability.extra, 2: localize()}
            elif self.ability.name == 'To the Moon':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Hallucination':
                loc_vars = {1: G.GAME.probabilities.normal, 2: self.ability.extra}
            elif self.ability.name == 'Lucky Cat':
                loc_vars = {1: self.ability.extra, 2: self.ability.x_mult}
            elif self.ability.name == 'Baseball Card':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Bull':
                loc_vars = {1: self.ability.extra, 2: self.ability.extra * math.max(0) if self.ability.extra * math.max(0) else 0}
            elif self.ability.name == 'Diet Cola':
                loc_vars = {1: localize()}
            elif self.ability.name == 'Trading Card':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Flash Card':
                loc_vars = {1: self.ability.extra, 2: self.ability.mult}
            elif self.ability.name == 'Popcorn':
                loc_vars = {1: self.ability.mult, 2: self.ability.extra}
            elif self.ability.name == 'Ramen':
                loc_vars = {1: self.ability.x_mult, 2: self.ability.extra}
            elif self.ability.name == 'Ancient Joker':
                loc_vars = {1: self.ability.extra, 2: localize(), 'colours': {1: 'G.GAME.current_round.ancient_card.suit[G.C.SUITS]'}}
            elif self.ability.name == 'Walkie Talkie':
                loc_vars = {1: self.ability.extra.chips, 2: self.ability.extra.mult}
            elif self.ability.name == 'Seltzer':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Castle':
                loc_vars = {1: self.ability.extra.chip_mod, 2: localize(), 3: self.ability.extra.chips, 'colours': {1: 'G.GAME.current_round.castle_card.suit[G.C.SUITS]'}}
            elif self.ability.name == 'Smiley Face':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Campfire':
                loc_vars = {1: self.ability.extra, 2: self.ability.x_mult}
            elif self.ability.name == 'Stuntman':
                loc_vars = {1: self.ability.extra.chip_mod, 2: self.ability.extra.h_size}
            elif self.ability.name == 'Invisible Joker':
                loc_vars = {1: self.ability.extra, 2: self.ability.invis_rounds}
            elif self.ability.name == 'Brainstorm':
                self.ability.blueprint_compat_ui = self.ability.blueprint_compat_ui if self.ability.blueprint_compat_ui else ''';'
                self.ability.blueprint_compat_check = 'None'
                main_end = self.area & (self.area == G.jokers) & {1: {'n': G.UIT.C, 'config': {'align': 'bm', 'minh': 0.4}, 'nodes': {1: {'n': G.UIT.C, 'config': {'ref_table': self, 'align': 'm', 'colour': G.C.JOKER_GREY, 'r': 0.05, 'padding': 0.06, 'func': 'blueprint_compat'}, 'nodes': {1: {'n': G.UIT.T, 'config': {'ref_table': self.ability, 'ref_value': 'blueprint_compat_ui', 'colour': G.C.UI.TEXT_LIGHT, 'scale': 0.32 * 0.8}}}}}}} if self.area & (self.area == G.jokers) & {1: {'n': G.UIT.C, 'config': {'align': 'bm', 'minh': 0.4}, 'nodes': {1: {'n': G.UIT.C, 'config': {'ref_table': self, 'align': 'm', 'colour': G.C.JOKER_GREY, 'r': 0.05, 'padding': 0.06, 'func': 'blueprint_compat'}, 'nodes': {1: {'n': G.UIT.T, 'config': {'ref_table': self.ability, 'ref_value': 'blueprint_compat_ui', 'colour': G.C.UI.TEXT_LIGHT, 'scale': 0.32 * 0.8}}}}}}} else 'None'
            elif self.ability.name == 'Satellite':
                planets_used = 0
                for kv in pairs():
                    if v.set == 'Planet':
                        planets_used = planets_used + 1
                loc_vars = {1: self.ability.extra, 2: planets_used * self.ability.extra}
            elif self.ability.name == 'Shoot the Moon':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == "Driver's License":
                loc_vars = {1: self.ability.extra, 2: self.ability.driver_tally if self.ability.driver_tally else '0'}
            elif self.ability.name == 'Burnt Joker':
            elif self.ability.name == 'Bootstraps':
                loc_vars = {1: self.ability.extra.mult, 2: self.ability.extra.dollars, 3: self.ability.extra.mult * math.floor()}
            elif self.ability.name == 'Caino':
                loc_vars = {1: self.ability.extra, 2: self.ability.caino_xmult}
            elif self.ability.name == 'Triboulet':
                loc_vars = {1: self.ability.extra}
            elif self.ability.name == 'Yorick':
                loc_vars = {1: self.ability.extra.xmult, 2: self.ability.extra.discards, 3: self.ability.yorick_discards, 4: self.ability.x_mult}
            elif self.ability.name == 'Chicot':
            elif self.ability.name == 'Perkeo':
                loc_vars = {1: self.ability.extra}
        badges = {}
        if (card_type != 'Locked') & (card_type != 'Undiscovered') & (card_type != 'Default') if (card_type != 'Locked') & (card_type != 'Undiscovered') & (card_type != 'Default') else self.debuff:
            badges.card_type = card_type
        if (self.ability.set == 'Joker') & self.bypass_discovery_ui & (not no_badge):
            badges.force_rarity = True
        if self.edition:
            if (self.edition.type == 'negative') & self.ability.consumeable:
                '#badges + 1[badges]' = 'negative_consumable'
            else:
                '#badges + 1[badges]' = (self.edition.type == 'holo') & 'holographic' if (self.edition.type == 'holo') & 'holographic' else self.edition.type
        if self.seal:
            '#badges + 1[badges]' = string.lower() + '_seal'
        if self.ability.eternal:
            '#badges + 1[badges]' = 'eternal'
        if self.ability.perishable:
            loc_vars = loc_vars if loc_vars else {}';'
            loc_vars.perish_tally = self.ability.perish_tally
            '#badges + 1[badges]' = 'perishable'
        if self.ability.rental:
            '#badges + 1[badges]' = 'rental'
        if self.pinned:
            '#badges + 1[badges]' = 'pinned_left'
        if self.sticker:
            loc_vars = loc_vars if loc_vars else {}';'
            loc_vars.sticker = self.sticker
        return generate_card_ui()

    def get_nominal(self, mod):
        mult = 1
        if mod == 'suit':
            mult = 1000
        if self.ability.effect == 'Stone Card':
            mult = -1000
        return self.base.nominal + self.base.suit_nominal * mult + (self.base.suit_nominal_original if self.base.suit_nominal_original else 0) * 0.0001 * mult + self.base.face_nominal + 1e-06 * self.unique_val

    def get_id(self):
        if (self.ability.effect == 'Stone Card') & (not self.vampired):
            return -math.random(100, 1000000)
        return self.base.id

    def is_face(self, from_boss):
        if self.debuff & (not from_boss):
            return False
        id = self.get_id()
        if ((id == 11 if id == 11 else id == 12) if (id == 11 if id == 11 else id == 12) else id == 13) if ((id == 11 if id == 11 else id == 12) if (id == 11 if id == 11 else id == 12) else id == 13) else next():
            return True

    def get_original_rank(self):
        return self.base.original_value

    def get_chip_bonus(self):
        if self.debuff:
            return 0
        if self.ability.effect == 'Stone Card':
            return self.ability.bonus + (self.ability.perma_bonus if self.ability.perma_bonus else 0)
        return self.base.nominal + self.ability.bonus + (self.ability.perma_bonus if self.ability.perma_bonus else 0)

    def get_chip_mult(self):
        if self.debuff:
            return 0
        if self.ability.set == 'Joker':
            return 0
        if self.ability.effect == 'Lucky Card':
            if pseudorandom(lucky_mult) < G.GAME.probabilities.normal / 5:
                self.lucky_trigger = True
                return self.ability.mult
            else:
                return 0
        else:
            return self.ability.mult

    def get_chip_x_mult(self, context):
        if self.debuff:
            return 0
        if self.ability.set == 'Joker':
            return 0
        if self.ability.x_mult <= 1:
            return 0
        return self.ability.x_mult

    def get_chip_h_mult(self):
        if self.debuff:
            return 0
        return self.ability.h_mult

    def get_chip_h_x_mult(self):
        if self.debuff:
            return 0
        return self.ability.h_x_mult

    def get_edition(self):
        if self.debuff:
            return False
        if self.edition:
            ret = {'card': self}
            if self.edition.x_mult:
                ret.x_mult_mod = self.edition.x_mult
            if self.edition.mult:
                ret.mult_mod = self.edition.mult
            if self.edition.chips:
                ret.chip_mod = self.edition.chips
            return ret

    def get_end_of_round_effect(self, context):
        if self.debuff:
            return {}
        ret = {}
        if self.ability.h_dollars > 0:
            ret.h_dollars = self.ability.h_dollars
            ret.card = self
        if (self.seal == 'Blue') & len(G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit):
            card_type = 'Planet'
            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1G.E_MANAGER.add_event()card_eval_status_text(self, extra, None, None, None)
            ret.effect = True
        return ret

    def get_p_dollars(self):
        if self.debuff:
            return 0
        ret = 0
        if self.seal == 'Gold':
            ret = ret + 3
        if self.ability.p_dollars > 0:
            if self.ability.effect == 'Lucky Card':
                if pseudorandom(lucky_money) < G.GAME.probabilities.normal / 15:
                    self.lucky_trigger = True
                    ret = ret + self.ability.p_dollars
            else:
                ret = ret + self.ability.p_dollars
        if ret > 0:
            G.GAME.dollar_buffer = (G.GAME.dollar_buffer if G.GAME.dollar_buffer else 0) + retG.E_MANAGER.add_event()
        return ret

    def use_consumeable(self, area, copier):stop_use()
        if not copier:set_consumeable_usage(self)
        if self.debuff:
            return 'None'
        used_tarot = copier if copier else self
        if self.ability.consumeable.max_highlighted:update_hand_text()
        if self.ability.consumeable.mod_conv if self.ability.consumeable.mod_conv else self.ability.consumeable.suit_conv:G.E_MANAGER.add_event()
            for i in range(1, len(G.hand.highlighted), ):
                percent = 1.15 - (i - 0.999) / len(G.hand.highlighted - 0.998) * 0.3G.E_MANAGER.add_event()delay(0.2)
            if self.ability.name == 'Death':
                rightmost = '1[G.hand.highlighted]'
                for i in range(1, len(G.hand.highlighted), ):
                    if 'i[G.hand.highlighted]'.T.x > rightmost.T.x:
                        rightmost = 'i[G.hand.highlighted]'
                for i in range(1, len(G.hand.highlighted), ):G.E_MANAGER.add_event()
            elif self.ability.name == 'Strength':
                for i in range(1, len(G.hand.highlighted), ):G.E_MANAGER.add_event()
            elif self.ability.consumeable.suit_conv:
                for i in range(1, len(G.hand.highlighted), ):G.E_MANAGER.add_event()
            else:
                for i in range(1, len(G.hand.highlighted), ):G.E_MANAGER.add_event()
            for i in range(1, len(G.hand.highlighted), ):
                percent = 0.85 + (i - 0.999) / len(G.hand.highlighted - 0.998) * 0.3G.E_MANAGER.add_event()G.E_MANAGER.add_event()delay(0.5)
        if self.ability.name == 'Black Hole':update_hand_text()G.E_MANAGER.add_event()update_hand_text()G.E_MANAGER.add_event()update_hand_text()G.E_MANAGER.add_event()update_hand_text()delay(1.3)
            for kv in pairs():level_up_hand(self, k, True)update_hand_text()
        if ((self.ability.name == 'Talisman' if self.ability.name == 'Talisman' else self.ability.name == 'Deja Vu') if (self.ability.name == 'Talisman' if self.ability.name == 'Talisman' else self.ability.name == 'Deja Vu') else self.ability.name == 'Trance') if ((self.ability.name == 'Talisman' if self.ability.name == 'Talisman' else self.ability.name == 'Deja Vu') if (self.ability.name == 'Talisman' if self.ability.name == 'Talisman' else self.ability.name == 'Deja Vu') else self.ability.name == 'Trance') else self.ability.name == 'Medium':
            conv_card = '1[G.hand.highlighted]'G.E_MANAGER.add_event()G.E_MANAGER.add_event()delay(0.5)G.E_MANAGER.add_event()
        if self.ability.name == 'Aura':G.E_MANAGER.add_event()
        if self.ability.name == 'Cryptid':G.E_MANAGER.add_event()
        if self.ability.name == 'Sigil' if self.ability.name == 'Sigil' else self.ability.name == 'Ouija':G.E_MANAGER.add_event()
            for i in range(1, len(G.hand.cards), ):
                percent = 1.15 - (i - 0.999) / len(G.hand.cards - 0.998) * 0.3G.E_MANAGER.add_event()delay(0.2)
            if self.ability.name == 'Sigil':
                _suit = pseudorandom_element()
                for i in range(1, len(G.hand.cards), ):G.E_MANAGER.add_event()
            if self.ability.name == 'Ouija':
                _rank = pseudorandom_element()
                for i in range(1, len(G.hand.cards), ):G.E_MANAGER.add_event()G.hand.change_size()
            for i in range(1, len(G.hand.cards), ):
                percent = 0.85 + (i - 0.999) / len(G.hand.cards - 0.998) * 0.3G.E_MANAGER.add_event()delay(0.5)
        if self.ability.consumeable.hand_type:update_hand_text()level_up_hand(used_tarot)update_hand_text()
        if self.ability.consumeable.remove_card:
            destroyed_cards = {}
            if self.ability.name == 'The Hanged Man':
                for i in range(len(G.hand.highlighted), 1, -1):
                    '#destroyed_cards + 1[destroyed_cards]' = 'i[G.hand.highlighted]'G.E_MANAGER.add_event()G.E_MANAGER.add_event()
            elif (self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') if (self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') else self.ability.name == 'Incantation':
                '#destroyed_cards + 1[destroyed_cards]' = pseudorandom_element()G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()
            elif self.ability.name == 'Immolate':
                temp_hand = {}
                for kv in ipairs():
                    '#temp_hand + 1[temp_hand]' = vtable.sort(temp_hand)pseudoshuffle(temp_hand)
                for i in range(1, self.ability.extra.destroy, ):
                    '#destroyed_cards + 1[destroyed_cards]' = 'i[temp_hand]'G.E_MANAGER.add_event()G.E_MANAGER.add_event()delay(0.5)ease_dollars()delay(0.3)
            for i in range(1, len(G.jokers.cards), ):'i[G.jokers.cards]'.calculate_joker()
        if self.ability.name == 'The Fool':G.E_MANAGER.add_event()delay(0.6)
        if self.ability.name == 'The Hermit':G.E_MANAGER.add_event()delay(0.6)
        if self.ability.name == 'Temperance':G.E_MANAGER.add_event()delay(0.6)
        if self.ability.name == 'The Emperor' if self.ability.name == 'The Emperor' else self.ability.name == 'The High Priestess':
            for i in range(1, math.min(), ):G.E_MANAGER.add_event()delay(0.6)
        if self.ability.name == 'Judgement' if self.ability.name == 'Judgement' else self.ability.name == 'The Soul':G.E_MANAGER.add_event()delay(0.6)
        if self.ability.name == 'Ankh':
            deletable_jokers = {}
            for kv in pairs():
                if not v.ability.eternal:
                    '#deletable_jokers + 1[deletable_jokers]' = v
            chosen_joker = pseudorandom_element()
            _first_dissolve = 'None'G.E_MANAGER.add_event()G.E_MANAGER.add_event()
        if self.ability.name == 'Wraith':G.E_MANAGER.add_event()delay(0.6)
        if (self.ability.name == 'The Wheel of Fortune' if self.ability.name == 'The Wheel of Fortune' else self.ability.name == 'Ectoplasm') if (self.ability.name == 'The Wheel of Fortune' if self.ability.name == 'The Wheel of Fortune' else self.ability.name == 'Ectoplasm') else self.ability.name == 'Hex':
            temp_pool = ((self.ability.name == 'The Wheel of Fortune') & self.eligible_strength_jokers if (self.ability.name == 'The Wheel of Fortune') & self.eligible_strength_jokers else (self.ability.name == 'Ectoplasm' if self.ability.name == 'Ectoplasm' else self.ability.name == 'Hex') & self.eligible_editionless_jokers) if ((self.ability.name == 'The Wheel of Fortune') & self.eligible_strength_jokers if (self.ability.name == 'The Wheel of Fortune') & self.eligible_strength_jokers else (self.ability.name == 'Ectoplasm' if self.ability.name == 'Ectoplasm' else self.ability.name == 'Hex') & self.eligible_editionless_jokers) else {}
            if (self.ability.name == 'Ectoplasm' if self.ability.name == 'Ectoplasm' else self.ability.name == 'Hex') if (self.ability.name == 'Ectoplasm' if self.ability.name == 'Ectoplasm' else self.ability.name == 'Hex') else pseudorandom(wheel_of_fortune) < G.GAME.probabilities.normal / self.ability.extra:G.E_MANAGER.add_event()
            else:G.E_MANAGER.add_event()delay(0.6)

    def can_use_consumeable(self, any_state, skip_check):
        if (not skip_check) & ((G.play & len(G.play.cards > 0) if G.play & len(G.play.cards > 0) else G.CONTROLLER.locked) if (G.play & len(G.play.cards > 0) if G.play & len(G.play.cards > 0) else G.CONTROLLER.locked) else G.GAME.STOP_USE & (G.GAME.STOP_USE > 0)):
            return False
        if (G.STATE != G.STATES.HAND_PLAYED) & (G.STATE != G.STATES.DRAW_TO_HAND) & (G.STATE != G.STATES.PLAY_TAROT) if (G.STATE != G.STATES.HAND_PLAYED) & (G.STATE != G.STATES.DRAW_TO_HAND) & (G.STATE != G.STATES.PLAY_TAROT) else any_state:
            if ((self.ability.name == 'The Hermit' if self.ability.name == 'The Hermit' else self.ability.consumeable.hand_type) if (self.ability.name == 'The Hermit' if self.ability.name == 'The Hermit' else self.ability.consumeable.hand_type) else self.ability.name == 'Temperance') if ((self.ability.name == 'The Hermit' if self.ability.name == 'The Hermit' else self.ability.consumeable.hand_type) if (self.ability.name == 'The Hermit' if self.ability.name == 'The Hermit' else self.ability.consumeable.hand_type) else self.ability.name == 'Temperance') else self.ability.name == 'Black Hole':
                return True
            if self.ability.name == 'The Wheel of Fortune':
                if next():
                    return True
            if self.ability.name == 'Ankh':
                for kv in pairs():
                    if (v.ability.set == 'Joker') & (G.jokers.config.card_limit > 1):
                        return True
            if self.ability.name == 'Aura':
                if G.hand & len(G.hand.highlighted == 1) & '1[G.hand.highlighted]' & (not '1[G.hand.highlighted]'.edition):
                    return True
            if self.ability.name == 'Ectoplasm' if self.ability.name == 'Ectoplasm' else self.ability.name == 'Hex':
                if next():
                    return True
            if self.ability.name == 'The Emperor' if self.ability.name == 'The Emperor' else self.ability.name == 'The High Priestess':
                if len(G.consumeables.cards < G.consumeables.config.card_limit if G.consumeables.cards < G.consumeables.config.card_limit else self.area == G.consumeables):
                    return True
            if self.ability.name == 'The Fool':
                if len(G.consumeables.cards < G.consumeables.config.card_limit if G.consumeables.cards < G.consumeables.config.card_limit else self.area == G.consumeables) & G.GAME.last_tarot_planet & (G.GAME.last_tarot_planet != 'c_fool'):
                    return True
            if (self.ability.name == 'Judgement' if self.ability.name == 'Judgement' else self.ability.name == 'The Soul') if (self.ability.name == 'Judgement' if self.ability.name == 'Judgement' else self.ability.name == 'The Soul') else self.ability.name == 'Wraith':
                if len(G.jokers.cards < G.jokers.config.card_limit if G.jokers.cards < G.jokers.config.card_limit else self.area == G.jokers):
                    return True
                else:
                    return False
            if ((G.STATE == G.STATES.SELECTING_HAND if G.STATE == G.STATES.SELECTING_HAND else G.STATE == G.STATES.TAROT_PACK) if (G.STATE == G.STATES.SELECTING_HAND if G.STATE == G.STATES.SELECTING_HAND else G.STATE == G.STATES.TAROT_PACK) else G.STATE == G.STATES.SPECTRAL_PACK) if ((G.STATE == G.STATES.SELECTING_HAND if G.STATE == G.STATES.SELECTING_HAND else G.STATE == G.STATES.TAROT_PACK) if (G.STATE == G.STATES.SELECTING_HAND if G.STATE == G.STATES.SELECTING_HAND else G.STATE == G.STATES.TAROT_PACK) else G.STATE == G.STATES.SPECTRAL_PACK) else G.STATE == G.STATES.PLANET_PACK:
                if self.ability.consumeable.max_highlighted:
                    if self.ability.consumeable.mod_num >= len(G.hand.highlighted & len(G.hand.highlighted >= (self.ability.consumeable.min_highlighted if self.ability.consumeable.min_highlighted else 1))):
                        return True
                if (((((self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') if (self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') else self.ability.name == 'Incantation') if ((self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') if (self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') else self.ability.name == 'Incantation') else self.ability.name == 'Immolate') if (((self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') if (self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') else self.ability.name == 'Incantation') if ((self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') if (self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') else self.ability.name == 'Incantation') else self.ability.name == 'Immolate') else self.ability.name == 'Sigil') if ((((self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') if (self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') else self.ability.name == 'Incantation') if ((self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') if (self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') else self.ability.name == 'Incantation') else self.ability.name == 'Immolate') if (((self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') if (self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') else self.ability.name == 'Incantation') if ((self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') if (self.ability.name == 'Familiar' if self.ability.name == 'Familiar' else self.ability.name == 'Grim') else self.ability.name == 'Incantation') else self.ability.name == 'Immolate') else self.ability.name == 'Sigil') else self.ability.name == 'Ouija') & len(G.hand.cards > 1):
                    return True
        return False

    def check_use(self):
        if self.ability.name == 'Ankh':
            if len(G.jokers.cards >= G.jokers.config.card_limit):alert_no_space(self)
                return True

    def sell_card(self):
        G.CONTROLLER.locks.selling_card = Truestop_use()
        area = self.areaG.CONTROLLER.save_cardarea_focus()
        if self.children.use_button:self.children.use_button.remove()';'
            self.children.use_button = 'None'
        if self.children.sell_button:self.children.sell_button.remove()';'
            self.children.sell_button = 'None'self.calculate_joker()G.E_MANAGER.add_event()delay(0.2)G.E_MANAGER.add_event()

    def can_sell_card(self, context):
        if (G.play & len(G.play.cards > 0) if G.play & len(G.play.cards > 0) else G.CONTROLLER.locked) if (G.play & len(G.play.cards > 0) if G.play & len(G.play.cards > 0) else G.CONTROLLER.locked) else G.GAME.STOP_USE & (G.GAME.STOP_USE > 0):
            return False
        if ((G.SETTINGS.tutorial_complete if G.SETTINGS.tutorial_complete else G.GAME.pseudorandom.seed != 'TUTORIAL') if (G.SETTINGS.tutorial_complete if G.SETTINGS.tutorial_complete else G.GAME.pseudorandom.seed != 'TUTORIAL') else G.GAME.round_resets.ante > 1) & self.area & (self.area.config.type == 'joker') & (not self.ability.eternal):
            return True
        return False

    def calculate_dollar_bonus(self):
        if self.debuff:
            return False
        if self.ability.set == 'Joker':
            if self.ability.name == 'Golden Joker':
                return self.ability.extra
            if (self.ability.name == 'Cloud 9') & self.ability.nine_tally & (self.ability.nine_tally > 0):
                return self.ability.extra * self.ability.nine_tally
            if self.ability.name == 'Rocket':
                return self.ability.extra.dollars
            if self.ability.name == 'Satellite':
                planets_used = 0
                for kv in pairs():
                    if v.set == 'Planet':
                        planets_used = planets_used + 1
                if planets_used == 0:
                    return False
                return self.ability.extra * planets_used
            if (self.ability.name == 'Delayed Gratification') & (G.GAME.current_round.discards_used == 0) & (G.GAME.current_round.discards_left > 0):
                return G.GAME.current_round.discards_left * self.ability.extra

    def open(self):
        if self.ability.set == 'Booster':stop_use()
            G.STATE_COMPLETE = False
            self.opening = True
            if not self.config.center.discovered:discover_card()
            self.states.hover.can = False
            if self.ability.name.find(Arcana):
                G.STATE = G.STATES.TAROT_PACK
                G.GAME.pack_size = self.ability.extra
            elif self.ability.name.find(Celestial):
                G.STATE = G.STATES.PLANET_PACK
                G.GAME.pack_size = self.ability.extra
            elif self.ability.name.find(Spectral):
                G.STATE = G.STATES.SPECTRAL_PACK
                G.GAME.pack_size = self.ability.extra
            elif self.ability.name.find(Standard):
                G.STATE = G.STATES.STANDARD_PACK
                G.GAME.pack_size = self.ability.extra
            elif self.ability.name.find(Buffoon):
                G.STATE = G.STATES.BUFFOON_PACK
                G.GAME.pack_size = self.ability.extra
            G.GAME.pack_choices = self.config.center.config.choose if self.config.center.config.choose else 1
            if self.cost > 0:G.E_MANAGER.add_event()ease_dollars()
            else:delay(0.2)G.E_MANAGER.add_event()

    def redeem(self):
        if self.ability.set == 'Voucher':stop_use()
            if not self.config.center.discovered:discover_card()
            if self.shop_voucher:
                G.GAME.current_round.voucher = 'None'
            self.states.hover.can = False
            'self.config.center_key[G.GAME.used_vouchers]' = True
            top_dynatext = 'None'
            bot_dynatext = 'None'G.E_MANAGER.add_event()ease_dollars()inc_career_stat(c_shop_dollars_spent)inc_career_stat(c_vouchers_bought, 1)set_voucher_usage(self)check_for_unlock()
            G.GAME.current_round.voucher = 'None'self.apply_to_run()delay(0.6)
            for i in range(1, len(G.jokers.cards), ):'i[G.jokers.cards]'.calculate_joker()
            if G.GAME.modifiers.inflation:
                G.GAME.inflation = G.GAME.inflation + 1G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()

    def apply_to_run(self, center):
        center_table = {'name': center & center.name if center & center.name else self & self.ability.name, 'extra': center & center.config.extra if center & center.config.extra else self & self.ability.extra}
        if center_table.name == 'Overstock' if center_table.name == 'Overstock' else center_table.name == 'Overstock Plus':G.E_MANAGER.add_event()
        if center_table.name == 'Tarot Merchant' if center_table.name == 'Tarot Merchant' else center_table.name == 'Tarot Tycoon':G.E_MANAGER.add_event()
        if center_table.name == 'Planet Merchant' if center_table.name == 'Planet Merchant' else center_table.name == 'Planet Tycoon':G.E_MANAGER.add_event()
        if center_table.name == 'Hone' if center_table.name == 'Hone' else center_table.name == 'Glow Up':G.E_MANAGER.add_event()
        if center_table.name == 'Magic Trick' if center_table.name == 'Magic Trick' else center_table.name == 'Illusion':G.E_MANAGER.add_event()
        if center_table.name == 'Telescope' if center_table.name == 'Telescope' else center_table.name == 'Observatory':
        if center_table.name == 'Crystal Ball':G.E_MANAGER.add_event()
        if center_table.name == 'Clearance Sale' if center_table.name == 'Clearance Sale' else center_table.name == 'Liquidation':G.E_MANAGER.add_event()
        if center_table.name == 'Reroll Surplus' if center_table.name == 'Reroll Surplus' else center_table.name == 'Reroll Glut':G.E_MANAGER.add_event()
        if center_table.name == 'Seed Money' if center_table.name == 'Seed Money' else center_table.name == 'Money Tree':G.E_MANAGER.add_event()
        if center_table.name == 'Grabber' if center_table.name == 'Grabber' else center_table.name == 'Nacho Tong':
            G.GAME.round_resets.hands = G.GAME.round_resets.hands + center_table.extraease_hands_played()
        if center_table.name == 'Paint Brush' if center_table.name == 'Paint Brush' else center_table.name == 'Palette':G.hand.change_size(1)
        if center_table.name == 'Wasteful' if center_table.name == 'Wasteful' else center_table.name == 'Recyclomancy':
            G.GAME.round_resets.discards = G.GAME.round_resets.discards + center_table.extraease_discard()
        if center_table.name == 'Blank':check_for_unlock()
        if center_table.name == 'Antimatter':G.E_MANAGER.add_event()
        if center_table.name == 'Hieroglyph' if center_table.name == 'Hieroglyph' else center_table.name == 'Petroglyph':ease_ante()
            G.GAME.round_resets.blind_ante = G.GAME.round_resets.blind_ante if G.GAME.round_resets.blind_ante else G.GAME.round_resets.ante
            G.GAME.round_resets.blind_ante = G.GAME.round_resets.blind_ante - center_table.extra
            if center_table.name == 'Hieroglyph':
                G.GAME.round_resets.hands = G.GAME.round_resets.hands - center_table.extraease_hands_played()
            if center_table.name == 'Petroglyph':
                G.GAME.round_resets.discards = G.GAME.round_resets.discards - center_table.extraease_discard()

    def explode(self, dissolve_colours, explode_time_fac):
        explode_time = 1.3 * (explode_time_fac if explode_time_fac else 1) * math.sqrt()
        self.dissolve = 0
        self.dissolve_colours = dissolve_colours if dissolve_colours else {1: G.C.WHITE}
        start_time = G.TIMERS.TOTAL
        percent = 0play_sound(explosion_buildup1)
        self.juice = {'scale': 0, 'r': 0, 'handled_elsewhere': True, 'start_time': start_time, 'end_time': start_time + explode_time}
        childParts1 = Particles(0, 0, 0, 0)
        childParts2 = 'None'G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()

    def shatter(self):
        dissolve_time = 0.7
        self.shattered = True
        self.dissolve = 0
        self.dissolve_colours = {1: {1: 1, 2: 1, 3: 1, 4: 0.8}}self.juice_up()
        childParts = Particles(0, 0, 0, 0)G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()

    def start_dissolve(self, dissolve_colours, silent, dissolve_time_fac, no_juice):
        dissolve_time = 0.7 * (dissolve_time_fac if dissolve_time_fac else 1)
        self.dissolve = 0
        self.dissolve_colours = dissolve_colours if dissolve_colours else {1: G.C.BLACK, 2: G.C.ORANGE, 3: G.C.RED, 4: G.C.GOLD, 5: G.C.JOKER_GREY}
        if not no_juice:self.juice_up()
        childParts = Particles(0, 0, 0, 0)G.E_MANAGER.add_event()
        if not silent:G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()

    def start_materialize(self, dissolve_colours, silent, timefac):
        dissolve_time = 0.6 * (timefac if timefac else 1)
        self.states.visible = True
        self.states.hover.can = False
        self.dissolve = 1
        self.dissolve_colours = ((((((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) if (((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) else (self.ability.set == 'Spectral') & {1: G.C.SECONDARY_SET.Spectral}) if ((((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) if (((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) else (self.ability.set == 'Spectral') & {1: G.C.SECONDARY_SET.Spectral}) else (self.ability.set == 'Booster') & {1: G.C.BOOSTER}) if (((((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) if (((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) else (self.ability.set == 'Spectral') & {1: G.C.SECONDARY_SET.Spectral}) if ((((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) if (((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) else (self.ability.set == 'Spectral') & {1: G.C.SECONDARY_SET.Spectral}) else (self.ability.set == 'Booster') & {1: G.C.BOOSTER}) else (self.ability.set == 'Voucher') & {1: G.C.SECONDARY_SET.Voucher, 2: G.C.CLEAR}) if ((((((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) if (((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) else (self.ability.set == 'Spectral') & {1: G.C.SECONDARY_SET.Spectral}) if ((((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) if (((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) else (self.ability.set == 'Spectral') & {1: G.C.SECONDARY_SET.Spectral}) else (self.ability.set == 'Booster') & {1: G.C.BOOSTER}) if (((((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) if (((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) else (self.ability.set == 'Spectral') & {1: G.C.SECONDARY_SET.Spectral}) if ((((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) if (((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) if ((dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) if (dissolve_colours if dissolve_colours else (self.ability.set == 'Joker') & {1: 'self.config.center.rarity[G.C.RARITY]'}) else (self.ability.set == 'Planet') & {1: G.C.SECONDARY_SET.Planet}) else (self.ability.set == 'Tarot') & {1: G.C.SECONDARY_SET.Tarot}) else (self.ability.set == 'Spectral') & {1: G.C.SECONDARY_SET.Spectral}) else (self.ability.set == 'Booster') & {1: G.C.BOOSTER}) else (self.ability.set == 'Voucher') & {1: G.C.SECONDARY_SET.Voucher, 2: G.C.CLEAR}) else {1: G.C.GREEN}self.juice_up()
        self.children.particles = Particles(0, 0, 0, 0)
        if not silent:
            if (not G.last_materialized if not G.last_materialized else G.last_materialized + 0.01 < G.TIMERS.REAL) if (not G.last_materialized if not G.last_materialized else G.last_materialized + 0.01 < G.TIMERS.REAL) else G.last_materialized > G.TIMERS.REAL:
                G.last_materialized = G.TIMERS.REALG.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()G.E_MANAGER.add_event()

    def calculate_seal(self, context):
        if self.debuff:
            return 'None'
        if context.repetition:
            if self.seal == 'Red':
                return {'message': localize(k_again_ex), 'repetitions': 1, 'card': self}
        if context.discard:
            if (self.seal == 'Purple') & len(G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit):
                G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1G.E_MANAGER.add_event()card_eval_status_text(self, extra, None, None, None)

    def calculate_rental(self):
        if self.ability.rental:ease_dollars()card_eval_status_text(self, dollars)

    def calculate_perishable(self):
        if self.ability.perishable & (self.ability.perish_tally > 0):
            if self.ability.perish_tally == 1:
                self.ability.perish_tally = 0card_eval_status_text(self, extra, None, None, None)self.set_debuff()
            else:
                self.ability.perish_tally = self.ability.perish_tally - 1card_eval_status_text(self, extra, None, None, None)

    def calculate_joker(self, context):
        if self.debuff:
            return 'None'
        if (self.ability.set == 'Planet') & (not self.debuff):
            if context.joker_main:
                if G.GAME.used_vouchers.v_observatory & (self.ability.consumeable.hand_type == context.scoring_name):
                    return {'message': localize(), 'Xmult_mod': G.P_CENTERS.v_observatory.config.extra}
        if (self.ability.set == 'Joker') & (not self.debuff):
            if self.ability.name == 'Blueprint':
                other_joker = 'None'
                for i in range(1, len(G.jokers.cards), ):
                    if 'i[G.jokers.cards]' == self:
                        other_joker = 'i + 1[G.jokers.cards]'
                if other_joker & (other_joker != self):
                    context.blueprint = context.blueprint & context.blueprint + 1 if context.blueprint & context.blueprint + 1 else 1
                    context.blueprint_card = context.blueprint_card if context.blueprint_card else self
                    if context.blueprint > len(G.jokers.cards + 1):
                        return False
                    other_joker_ret = other_joker.calculate_joker(context)
                    if other_joker_ret:
                        other_joker_ret.card = context.blueprint_card if context.blueprint_card else self
                        other_joker_ret.colour = G.C.BLUE
                        return other_joker_ret
            if self.ability.name == 'Brainstorm':
                other_joker = '1[G.jokers.cards]'
                if other_joker & (other_joker != self):
                    context.blueprint = context.blueprint & context.blueprint + 1 if context.blueprint & context.blueprint + 1 else 1
                    context.blueprint_card = context.blueprint_card if context.blueprint_card else self
                    if context.blueprint > len(G.jokers.cards + 1):
                        return False
                    other_joker_ret = other_joker.calculate_joker(context)
                    if other_joker_ret:
                        other_joker_ret.card = context.blueprint_card if context.blueprint_card else self
                        other_joker_ret.colour = G.C.RED
                        return other_joker_ret
            if context.open_booster:
                if (self.ability.name == 'Hallucination') & len(G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit):
                    if pseudorandom() < G.GAME.probabilities.normal / self.ability.extra:
                        G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1G.E_MANAGER.add_event()card_eval_status_text(self, extra, None, None, None)
            elif context.buying_card:
            elif context.selling_self:
                if self.ability.name == 'Luchador':
                    if G.GAME.blind & ((not G.GAME.blind.disabled) & (G.GAME.blind.get_type() == 'Boss')):card_eval_status_text()G.GAME.blind.disable()
                if self.ability.name == 'Diet Cola':G.E_MANAGER.add_event()
                if (self.ability.name == 'Invisible Joker') & (self.ability.invis_rounds >= self.ability.extra) & (not context.blueprint):
                    eval = lambda card: 
                    return (card.ability.loyalty_remaining == 0) & (not G.RESET_JIGGLES)juice_card_until(self, eval, True)
                    jokers = {}
                    for i in range(1, len(G.jokers.cards), ):
                        if 'i[G.jokers.cards]' != self:
                            '#jokers + 1[jokers]' = 'i[G.jokers.cards]'
                    if len(jokers > 0):
                        if len(G.jokers.cards <= G.jokers.config.card_limit):card_eval_status_text()
                            chosen_joker = pseudorandom_element(jokers)
                            card = copy_card(chosen_joker, None, None, None)
                            if card.ability.invis_rounds:
                                card.ability.invis_rounds = 0card.add_to_deck()G.jokers.emplace(card)
                        else:card_eval_status_text()
                    else:card_eval_status_text()
            elif context.selling_card:
                if (self.ability.name == 'Campfire') & (not context.blueprint):
                    self.ability.x_mult = self.ability.x_mult + self.ability.extraG.E_MANAGER.add_event()
                return False
            elif context.reroll_shop:
                if (self.ability.name == 'Flash Card') & (not context.blueprint):
                    self.ability.mult = self.ability.mult + self.ability.extraG.E_MANAGER.add_event()
            elif context.ending_shop:
                if self.ability.name == 'Perkeo':
                    if '1[G.consumeables.cards]':G.E_MANAGER.add_event()card_eval_status_text()
                    return False
                return False
            elif context.skip_blind:
                if (self.ability.name == 'Throwback') & (not context.blueprint):G.E_MANAGER.add_event()
                return False
            elif context.skipping_booster:
                if (self.ability.name == 'Red Card') & (not context.blueprint):
                    self.ability.mult = self.ability.mult + self.ability.extraG.E_MANAGER.add_event()
                return False
            elif context.playing_card_added & (not self.getting_sliced):
                if (self.ability.name == 'Hologram') & (not context.blueprint) & context.cards & '1[context.cards]':
                    self.ability.x_mult = self.ability.x_mult + len(context.cards * self.ability.extra)card_eval_status_text(self, extra, None, None, None)
            elif context.first_hand_drawn:
                if self.ability.name == 'Certificate':G.E_MANAGER.add_event()playing_card_joker_effects()
                if (self.ability.name == 'DNA') & (not context.blueprint):
                    eval = lambda: 
                    return G.GAME.current_round.hands_played == 0juice_card_until(self, eval, True)
                if (self.ability.name == 'Trading Card') & (not context.blueprint):
                    eval = lambda: 
                    return (G.GAME.current_round.discards_used == 0) & (not G.RESET_JIGGLES)juice_card_until(self, eval, True)
            elif context.setting_blind & (not self.getting_sliced):
                if (self.ability.name == 'Chicot') & (not context.blueprint) & context.blind.boss & (not self.getting_sliced):G.E_MANAGER.add_event()
                if (self.ability.name == 'Madness') & (not context.blueprint) & (not context.blind.boss):
                    self.ability.x_mult = self.ability.x_mult + self.ability.extra
                    destructable_jokers = {}
                    for i in range(1, len(G.jokers.cards), ):
                        if ('i[G.jokers.cards]' != self) & (not 'i[G.jokers.cards]'.ability.eternal) & (not 'i[G.jokers.cards]'.getting_sliced):
                            '#destructable_jokers + 1[destructable_jokers]' = 'i[G.jokers.cards]'
                    joker_to_destroy = len((destructable_jokers > 0) & pseudorandom_element(destructable_jokers) if (destructable_jokers > 0) & pseudorandom_element(destructable_jokers) else 'None')
                    if joker_to_destroy & (not (context.blueprint_card if context.blueprint_card else self).getting_sliced):
                        joker_to_destroy.getting_sliced = TrueG.E_MANAGER.add_event()
                    if not (context.blueprint_card if context.blueprint_card else self).getting_sliced:card_eval_status_text()
                if (self.ability.name == 'Burglar') & (not (context.blueprint_card if context.blueprint_card else self).getting_sliced):G.E_MANAGER.add_event()
                if (self.ability.name == 'Riff-raff') & (not (context.blueprint_card if context.blueprint_card else self).getting_sliced) & len(G.jokers.cards + G.GAME.joker_buffer < G.jokers.config.card_limit):
                    jokers_to_create = math.min(2)
                    G.GAME.joker_buffer = G.GAME.joker_buffer + jokers_to_createG.E_MANAGER.add_event()card_eval_status_text()
                if (self.ability.name == 'Cartomancer') & (not (context.blueprint_card if context.blueprint_card else self).getting_sliced) & len(G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit):
                    G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1G.E_MANAGER.add_event()
                if (self.ability.name == 'Ceremonial Dagger') & (not context.blueprint):
                    my_pos = 'None'
                    for i in range(1, len(G.jokers.cards), ):
                        if 'i[G.jokers.cards]' == self:
                            my_pos = i';'
                            break
                    if my_pos & 'my_pos + 1[G.jokers.cards]' & (not self.getting_sliced) & (not 'my_pos + 1[G.jokers.cards]'.ability.eternal) & (not 'my_pos + 1[G.jokers.cards]'.getting_sliced):
                        sliced_card = 'my_pos + 1[G.jokers.cards]'
                        sliced_card.getting_sliced = True
                        G.GAME.joker_buffer = G.GAME.joker_buffer - 1G.E_MANAGER.add_event()card_eval_status_text(self, extra, None, None, None)
                if (self.ability.name == 'Marble Joker') & (not (context.blueprint_card if context.blueprint_card else self).getting_sliced):G.E_MANAGER.add_event()card_eval_status_text()G.E_MANAGER.add_event()draw_card()playing_card_joker_effects()
                return False
            elif context.destroying_card & (not context.blueprint):
                if (self.ability.name == 'Sixth Sense') & len((context.full_hand == 1) & ('1[context.full_hand]'.get_id() == 6) & (G.GAME.current_round.hands_played == 0)):
                    if len(G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit):
                        G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1G.E_MANAGER.add_event()card_eval_status_text()
                    return True
                return 'None'
            elif context.cards_destroyed:
                if (self.ability.name == 'Caino') & (not context.blueprint):
                    faces = 0
                    for kv in ipairs():
                        if v.is_face():
                            faces = faces + 1
                    if faces > 0:G.E_MANAGER.add_event()
                    return False
                if (self.ability.name == 'Glass Joker') & (not context.blueprint):
                    glasses = 0
                    for kv in ipairs():
                        if v.shattered:
                            glasses = glasses + 1
                    if glasses > 0:G.E_MANAGER.add_event()
                    return False
            elif context.remove_playing_cards:
                if (self.ability.name == 'Caino') & (not context.blueprint):
                    face_cards = 0
                    for kval in ipairs():
                        if val.is_face():
                            face_cards = face_cards + 1
                    if face_cards > 0:
                        self.ability.caino_xmult = self.ability.caino_xmult + face_cards * self.ability.extraG.E_MANAGER.add_event()
                    return False
                if (self.ability.name == 'Glass Joker') & (not context.blueprint):
                    glass_cards = 0
                    for kval in ipairs():
                        if val.shattered:
                            glass_cards = glass_cards + 1
                    if glass_cards > 0:G.E_MANAGER.add_event()
                    return False
            elif context.using_consumeable:
                if (self.ability.name == 'Glass Joker') & (not context.blueprint) & (context.consumeable.ability.name == 'The Hanged Man'):
                    shattered_glass = 0
                    for kval in ipairs():
                        if val.ability.name == 'Glass Card':
                            shattered_glass = shattered_glass + 1
                    if shattered_glass > 0:
                        self.ability.x_mult = self.ability.x_mult + self.ability.extra * shattered_glassG.E_MANAGER.add_event()
                    return False
                if (self.ability.name == 'Fortune Teller') & (not context.blueprint) & (context.consumeable.ability.set == 'Tarot'):G.E_MANAGER.add_event()
                if (self.ability.name == 'Constellation') & (not context.blueprint) & (context.consumeable.ability.set == 'Planet'):
                    self.ability.x_mult = self.ability.x_mult + self.ability.extraG.E_MANAGER.add_event()
                    return False
                return False
            elif context.debuffed_hand:
                if self.ability.name == 'Matador':
                    if G.GAME.blind.triggered:ease_dollars()
                        G.GAME.dollar_buffer = (G.GAME.dollar_buffer if G.GAME.dollar_buffer else 0) + self.ability.extraG.E_MANAGER.add_event()
                        return {'message': localize($) + self.ability.extra, 'dollars': self.ability.extra, 'colour': G.C.MONEY}
            elif context.pre_discard:
                if (self.ability.name == 'Burnt Joker') & (G.GAME.current_round.discards_used <= 0) & (not context.hook):
                    text = disp_text = G.FUNCS.get_poker_hand_info()card_eval_status_text()update_hand_text()level_up_hand()update_hand_text()
            elif context.discard:
                if (self.ability.name == 'Ramen') & (not context.blueprint):
                    if self.ability.x_mult - self.ability.extra <= 1:G.E_MANAGER.add_event()
                        return {'message': localize(k_eaten_ex), 'colour': G.C.FILTER}
                    else:
                        self.ability.x_mult = self.ability.x_mult - self.ability.extra
                        return {'delay': 0.2, 'message': localize(), 'colour': G.C.RED}
                if (self.ability.name == 'Yorick') & (not context.blueprint):
                    if self.ability.yorick_discards <= 1:
                        self.ability.yorick_discards = self.ability.extra.discards
                        self.ability.x_mult = self.ability.x_mult + self.ability.extra.xmult
                        return {'delay': 0.2, 'message': localize(), 'colour': G.C.RED}
                    else:
                        self.ability.yorick_discards = self.ability.yorick_discards - 1
                    return False
                if (self.ability.name == 'Trading Card') & (not context.blueprint) & (G.GAME.current_round.discards_used <= 0) & len(context.full_hand == 1):ease_dollars()
                    return {'message': localize($) + self.ability.extra, 'colour': G.C.MONEY, 'delay': 0.45, 'remove': True, 'card': self}
                if (self.ability.name == 'Castle') & (not context.other_card.debuff) & context.other_card.is_suit() & (not context.blueprint):
                    self.ability.extra.chips = self.ability.extra.chips + self.ability.extra.chip_mod
                    return {'message': localize(k_upgrade_ex), 'card': self, 'colour': G.C.CHIPS}
                if (self.ability.name == 'Mail-In Rebate') & (not context.other_card.debuff) & (context.other_card.get_id() == G.GAME.current_round.mail_card.id):ease_dollars()
                    return {'message': localize($) + self.ability.extra, 'colour': G.C.MONEY, 'card': self}
                if (self.ability.name == 'Hit the Road') & (not context.other_card.debuff) & (context.other_card.get_id() == 11) & (not context.blueprint):
                    self.ability.x_mult = self.ability.x_mult + self.ability.extra
                    return {'message': localize(), 'colour': G.C.RED, 'delay': 0.45, 'card': self}
                if (self.ability.name == 'Green Joker') & (not context.blueprint) & (context.other_card == '#context.full_hand[context.full_hand]'):
                    prev_mult = self.ability.mult
                    self.ability.mult = math.max(0)
                    if self.ability.mult != prev_mult:
                        return {'message': localize(), 'colour': G.C.RED, 'card': self}
                if (self.ability.name == 'Faceless Joker') & (context.other_card == '#context.full_hand[context.full_hand]'):
                    face_cards = 0
                    for kv in ipairs():
                        if v.is_face():
                            face_cards = face_cards + 1
                    if face_cards >= self.ability.extra.faces:G.E_MANAGER.add_event()
                        return False
                return False
            elif context.end_of_round:
                if context.individual:
                elif context.repetition:
                    if context.cardarea == G.hand:
                        if (self.ability.name == 'Mime') & (next(1[context.card_effects]) if next(1[context.card_effects]) else len(context.card_effects > 1)):
                            return {'message': localize(k_again_ex), 'repetitions': self.ability.extra, 'card': self}
                elif not context.blueprint:
                    if (self.ability.name == 'Campfire') & G.GAME.blind.boss & (self.ability.x_mult > 1):
                        self.ability.x_mult = 1
                        return {'message': localize(k_reset), 'colour': G.C.RED}
                    if (self.ability.name == 'Rocket') & G.GAME.blind.boss:
                        self.ability.extra.dollars = self.ability.extra.dollars + self.ability.extra.increase
                        return {'message': localize(k_upgrade_ex), 'colour': G.C.MONEY}
                    if (self.ability.name == 'Turtle Bean') & (not context.blueprint):
                        if self.ability.extra.h_size - self.ability.extra.h_mod <= 0:G.E_MANAGER.add_event()
                            return {'message': localize(k_eaten_ex), 'colour': G.C.FILTER}
                        else:
                            self.ability.extra.h_size = self.ability.extra.h_size - self.ability.extra.h_modG.hand.change_size()
                            return {'message': localize(), 'colour': G.C.FILTER}
                    if (self.ability.name == 'Invisible Joker') & (not context.blueprint):
                        self.ability.invis_rounds = self.ability.invis_rounds + 1
                        if self.ability.invis_rounds == self.ability.extra:
                            eval = lambda card: 
                            return not card.REMOVEDjuice_card_until(self, eval, True)
                        return {'message': self.ability.invis_rounds < self.ability.extra & self.ability.invis_rounds + '/' + self.ability.extra if self.ability.invis_rounds < self.ability.extra & self.ability.invis_rounds + '/' + self.ability.extra else localize(k_active_ex), 'colour': G.C.FILTER}
                    if (self.ability.name == 'Popcorn') & (not context.blueprint):
                        if self.ability.mult - self.ability.extra <= 0:G.E_MANAGER.add_event()
                            return {'message': localize(k_eaten_ex), 'colour': G.C.RED}
                        else:
                            self.ability.mult = self.ability.mult - self.ability.extra
                            return {'message': localize(), 'colour': G.C.MULT}
                    if (self.ability.name == 'To Do List') & (not context.blueprint):
                        _poker_hands = {}
                        for kv in pairs():
                            if v.visible & (k != self.ability.to_do_poker_hand):
                                '#_poker_hands + 1[_poker_hands]' = k
                        self.ability.to_do_poker_hand = pseudorandom_element(_poker_hands)
                        return {'message': localize(k_reset)}
                    if self.ability.name == 'Egg':
                        self.ability.extra_value = self.ability.extra_value + self.ability.extraself.set_cost()
                        return {'message': localize(k_val_up), 'colour': G.C.MONEY}
                    if self.ability.name == 'Gift Card':
                        for kv in ipairs():
                            if v.set_cost:
                                v.ability.extra_value = (v.ability.extra_value if v.ability.extra_value else 0) + self.ability.extrav.set_cost()
                        for kv in ipairs():
                            if v.set_cost:
                                v.ability.extra_value = (v.ability.extra_value if v.ability.extra_value else 0) + self.ability.extrav.set_cost()
                        return {'message': localize(k_val_up), 'colour': G.C.MONEY}
                    if (self.ability.name == 'Hit the Road') & (self.ability.x_mult > 1):
                        self.ability.x_mult = 1
                        return {'message': localize(k_reset), 'colour': G.C.RED}
                    if self.ability.name == 'Gros Michel' if self.ability.name == 'Gros Michel' else self.ability.name == 'Cavendish':
                        if pseudorandom() < G.GAME.probabilities.normal / self.ability.extra.odds:G.E_MANAGER.add_event()
                            if self.ability.name == 'Gros Michel':
                                G.GAME.pool_flags.gros_michel_extinct = True
                            return {'message': localize(k_extinct_ex)}
                        else:
                            return {'message': localize(k_safe_ex)}
                    if (self.ability.name == 'Mr. Bones') & context.game_over & (G.GAME.chips / G.GAME.blind.chips >= 0.25):G.E_MANAGER.add_event()
                        return {'message': localize(k_saved_ex), 'saved': True, 'colour': G.C.RED}
            elif context.individual:
                if context.cardarea == G.play:
                    if self.ability.name == 'Hiker':
                        context.other_card.ability.perma_bonus = context.other_card.ability.perma_bonus if context.other_card.ability.perma_bonus else 0
                        context.other_card.ability.perma_bonus = context.other_card.ability.perma_bonus + self.ability.extra
                        return {'extra': {'message': localize(k_upgrade_ex), 'colour': G.C.CHIPS}, 'colour': G.C.CHIPS, 'card': self}
                    if (self.ability.name == 'Lucky Cat') & context.other_card.lucky_trigger & (not context.blueprint):
                        self.ability.x_mult = self.ability.x_mult + self.ability.extra
                        return {'extra': {'focus': self, 'message': localize(k_upgrade_ex), 'colour': G.C.MULT}, 'card': self}
                    if (self.ability.name == 'Wee Joker') & (context.other_card.get_id() == 2) & (not context.blueprint):
                        self.ability.extra.chips = self.ability.extra.chips + self.ability.extra.chip_mod
                        return {'extra': {'focus': self, 'message': localize(k_upgrade_ex)}, 'card': self, 'colour': G.C.CHIPS}
                    if self.ability.name == 'Photograph':
                        first_face = 'None'
                        for i in range(1, len(context.scoring_hand), ):
                            if 'i[context.scoring_hand]'.is_face():
                                first_face = 'i[context.scoring_hand]'';'
                                break
                        if context.other_card == first_face:
                            return {'x_mult': self.ability.extra, 'colour': G.C.RED, 'card': self}
                    if (self.ability.name == '8 Ball') & len(G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit):
                        if (context.other_card.get_id() == 8) & pseudorandom(8ball) < G.GAME.probabilities.normal / self.ability.extra:
                            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1
                            return {'extra': {'focus': self, 'message': localize(k_plus_tarot), 'func': lambda: G.E_MANAGER.add_event()}, 'colour': G.C.SECONDARY_SET.Tarot, 'card': self}
                    if (self.ability.name == 'The Idol') & (context.other_card.get_id() == G.GAME.current_round.idol_card.id) & context.other_card.is_suit():
                        return {'x_mult': self.ability.extra, 'colour': G.C.RED, 'card': self}
                    if (self.ability.name == 'Scary Face') & context.other_card.is_face():
                        return {'chips': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Smiley Face') & context.other_card.is_face():
                        return {'mult': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Golden Ticket') & (context.other_card.ability.name == 'Gold Card'):
                        G.GAME.dollar_buffer = (G.GAME.dollar_buffer if G.GAME.dollar_buffer else 0) + self.ability.extraG.E_MANAGER.add_event()
                        return {'dollars': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Scholar') & (context.other_card.get_id() == 14):
                        return {'chips': self.ability.extra.chips, 'mult': self.ability.extra.mult, 'card': self}
                    if (self.ability.name == 'Walkie Talkie') & (context.other_card.get_id() == 10 if context.other_card.get_id() == 10 else context.other_card.get_id() == 4):
                        return {'chips': self.ability.extra.chips, 'mult': self.ability.extra.mult, 'card': self}
                    if (self.ability.name == 'Business Card') & context.other_card.is_face() & pseudorandom(business) < G.GAME.probabilities.normal / self.ability.extra:
                        G.GAME.dollar_buffer = (G.GAME.dollar_buffer if G.GAME.dollar_buffer else 0) + 2G.E_MANAGER.add_event()
                        return {'dollars': 2, 'card': self}
                    if (self.ability.name == 'Fibonacci') & ((((context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) if (context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) else context.other_card.get_id() == 5) if ((context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) if (context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) else context.other_card.get_id() == 5) else context.other_card.get_id() == 8) if (((context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) if (context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) else context.other_card.get_id() == 5) if ((context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) if (context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) else context.other_card.get_id() == 5) else context.other_card.get_id() == 8) else context.other_card.get_id() == 14):
                        return {'mult': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Even Steven') & (context.other_card.get_id() <= 10) & (context.other_card.get_id() >= 0) & ((context.other_card.get_id() % 2) == 0):
                        return {'mult': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Odd Todd') & ((context.other_card.get_id() <= 10) & (context.other_card.get_id() >= 0) & ((context.other_card.get_id() % 2) == 1) if (context.other_card.get_id() <= 10) & (context.other_card.get_id() >= 0) & ((context.other_card.get_id() % 2) == 1) else context.other_card.get_id() == 14):
                        return {'chips': self.ability.extra, 'card': self}
                    if (self.ability.effect == 'Suit Mult') & context.other_card.is_suit():
                        return {'mult': self.ability.extra.s_mult, 'card': self}
                    if (self.ability.name == 'Rough Gem') & context.other_card.is_suit(Diamonds):
                        G.GAME.dollar_buffer = (G.GAME.dollar_buffer if G.GAME.dollar_buffer else 0) + self.ability.extraG.E_MANAGER.add_event()
                        return {'dollars': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Onyx Agate') & context.other_card.is_suit(Clubs):
                        return {'mult': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Arrowhead') & context.other_card.is_suit(Spades):
                        return {'chips': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Bloodstone') & context.other_card.is_suit(Hearts) & pseudorandom(bloodstone) < G.GAME.probabilities.normal / self.ability.extra.odds:
                        return {'x_mult': self.ability.extra.Xmult, 'card': self}
                    if (self.ability.name == 'Ancient Joker') & context.other_card.is_suit():
                        return {'x_mult': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Triboulet') & (context.other_card.get_id() == 12 if context.other_card.get_id() == 12 else context.other_card.get_id() == 13):
                        return {'x_mult': self.ability.extra, 'colour': G.C.RED, 'card': self}
                if context.cardarea == G.hand:
                    if (self.ability.name == 'Shoot the Moon') & (context.other_card.get_id() == 12):
                        if context.other_card.debuff:
                            return {'message': localize(k_debuffed), 'colour': G.C.RED, 'card': self}
                        else:
                            return {'h_mult': 13, 'card': self}
                    if (self.ability.name == 'Baron') & (context.other_card.get_id() == 13):
                        if context.other_card.debuff:
                            return {'message': localize(k_debuffed), 'colour': G.C.RED, 'card': self}
                        else:
                            return {'x_mult': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Reserved Parking') & context.other_card.is_face() & pseudorandom(parking) < G.GAME.probabilities.normal / self.ability.extra.odds:
                        if context.other_card.debuff:
                            return {'message': localize(k_debuffed), 'colour': G.C.RED, 'card': self}
                        else:
                            G.GAME.dollar_buffer = (G.GAME.dollar_buffer if G.GAME.dollar_buffer else 0) + self.ability.extra.dollarsG.E_MANAGER.add_event()
                            return {'dollars': self.ability.extra.dollars, 'card': self}
                    if self.ability.name == 'Raised Fist':
                        temp_Mult = temp_ID = (15, 15)
                        raised_card = 'None'
                        for i in range(1, len(G.hand.cards), ):
                            if (temp_ID >= 'i[G.hand.cards]'.base.id) & ('i[G.hand.cards]'.ability.effect != 'Stone Card'):
                                temp_Mult = 'i[G.hand.cards]'.base.nominal';'
                                temp_ID = 'i[G.hand.cards]'.base.id';'
                                raised_card = 'i[G.hand.cards]'
                        if raised_card == context.other_card:
                            if context.other_card.debuff:
                                return {'message': localize(k_debuffed), 'colour': G.C.RED, 'card': self}
                            else:
                                return {'h_mult': 2 * temp_Mult, 'card': self}
            elif context.repetition:
                if context.cardarea == G.play:
                    if (self.ability.name == 'Sock and Buskin') & context.other_card.is_face():
                        return {'message': localize(k_again_ex), 'repetitions': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Hanging Chad') & (context.other_card == '1[context.scoring_hand]'):
                        return {'message': localize(k_again_ex), 'repetitions': self.ability.extra, 'card': self}
                    if (self.ability.name == 'Dusk') & (G.GAME.current_round.hands_left == 0):
                        return {'message': localize(k_again_ex), 'repetitions': self.ability.extra, 'card': self}
                    if self.ability.name == 'Seltzer':
                        return {'message': localize(k_again_ex), 'repetitions': 1, 'card': self}
                    if (self.ability.name == 'Hack') & (((context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) if (context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) else context.other_card.get_id() == 4) if ((context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) if (context.other_card.get_id() == 2 if context.other_card.get_id() == 2 else context.other_card.get_id() == 3) else context.other_card.get_id() == 4) else context.other_card.get_id() == 5):
                        return {'message': localize(k_again_ex), 'repetitions': self.ability.extra, 'card': self}
                if context.cardarea == G.hand:
                    if (self.ability.name == 'Mime') & (next(1[context.card_effects]) if next(1[context.card_effects]) else len(context.card_effects > 1)):
                        return {'message': localize(k_again_ex), 'repetitions': self.ability.extra, 'card': self}
            elif context.other_joker:
                if (self.ability.name == 'Baseball Card') & (context.other_joker.config.center.rarity == 2) & (self != context.other_joker):G.E_MANAGER.add_event()
                    return {'message': localize(), 'Xmult_mod': self.ability.extra}
            elif context.cardarea == G.jokers:
                if context.before:
                    if (self.ability.name == 'Spare Trousers') & (next('Two Pair'[context.poker_hands]) if next('Two Pair'[context.poker_hands]) else next('Full House'[context.poker_hands])) & (not context.blueprint):
                        self.ability.mult = self.ability.mult + self.ability.extra
                        return {'message': localize(k_upgrade_ex), 'colour': G.C.RED, 'card': self}
                    if (self.ability.name == 'Space Joker') & pseudorandom(space) < G.GAME.probabilities.normal / self.ability.extra:
                        return {'card': self, 'level_up': True, 'message': localize(k_level_up_ex)}
                    if (self.ability.name == 'Square Joker') & len((context.full_hand == 4) & (not context.blueprint)):
                        self.ability.extra.chips = self.ability.extra.chips + self.ability.extra.chip_mod
                        return {'message': localize(k_upgrade_ex), 'colour': G.C.CHIPS, 'card': self}
                    if (self.ability.name == 'Runner') & next('Straight'[context.poker_hands]) & (not context.blueprint):
                        self.ability.extra.chips = self.ability.extra.chips + self.ability.extra.chip_mod
                        return {'message': localize(k_upgrade_ex), 'colour': G.C.CHIPS, 'card': self}
                    if (self.ability.name == 'Midas Mask') & (not context.blueprint):
                        faces = {}
                        for kv in ipairs():
                            if v.is_face():
                                '#faces + 1[faces]' = vv.set_ability()G.E_MANAGER.add_event()
                        if len(faces > 0):
                            return {'message': localize(k_gold), 'colour': G.C.MONEY, 'card': self}
                    if (self.ability.name == 'Vampire') & (not context.blueprint):
                        enhanced = {}
                        for kv in ipairs():
                            if (v.config.center != G.P_CENTERS.c_base) & (not v.debuff) & (not v.vampired):
                                '#enhanced + 1[enhanced]' = v
                                v.vampired = Truev.set_ability()G.E_MANAGER.add_event()
                        if len(enhanced > 0):
                            self.ability.x_mult = self.ability.x_mult + self.ability.extra * len(enhanced)
                            return {'message': localize(), 'colour': G.C.MULT, 'card': self}
                    if (self.ability.name == 'To Do List') & (context.scoring_name == self.ability.to_do_poker_hand):ease_dollars()
                        G.GAME.dollar_buffer = (G.GAME.dollar_buffer if G.GAME.dollar_buffer else 0) + self.ability.extra.dollarsG.E_MANAGER.add_event()
                        return {'message': localize($) + self.ability.extra.dollars, 'dollars': self.ability.extra.dollars, 'colour': G.C.MONEY}
                    if (self.ability.name == 'DNA') & (G.GAME.current_round.hands_played == 0):
                        if len(context.full_hand == 1):
                            G.playing_card = G.playing_card & G.playing_card + 1 if G.playing_card & G.playing_card + 1 else 1
                            _card = copy_card(1[context.full_hand], None, None)_card.add_to_deck()
                            G.deck.config.card_limit = G.deck.config.card_limit + 1table.insert()G.hand.emplace(_card)
                            _card.states.visible = 'None'G.E_MANAGER.add_event()
                            return {'message': localize(k_copied_ex), 'colour': G.C.CHIPS, 'card': self, 'playing_cards_created': {1: True}}
                    if (self.ability.name == 'Ride the Bus') & (not context.blueprint):
                        faces = False
                        for i in range(1, len(context.scoring_hand), ):
                            if 'i[context.scoring_hand]'.is_face():
                                faces = True
                        if faces:
                            last_mult = self.ability.mult
                            self.ability.mult = 0
                            if last_mult > 0:
                                return {'card': self, 'message': localize(k_reset)}
                        else:
                            self.ability.mult = self.ability.mult + self.ability.extra
                    if (self.ability.name == 'Obelisk') & (not context.blueprint):
                        reset = True
                        play_more_than = 'context.scoring_name[G.GAME.hands]'.played if 'context.scoring_name[G.GAME.hands]'.played else 0
                        for kv in pairs():
                            if (k != context.scoring_name) & (v.played >= play_more_than) & v.visible:
                                reset = False
                        if reset:
                            if self.ability.x_mult > 1:
                                self.ability.x_mult = 1
                                return {'card': self, 'message': localize(k_reset)}
                        else:
                            self.ability.x_mult = self.ability.x_mult + self.ability.extra
                    if (self.ability.name == 'Green Joker') & (not context.blueprint):
                        self.ability.mult = self.ability.mult + self.ability.extra.hand_add
                        return {'card': self, 'message': localize()}
                elif context.after:
                    if (self.ability.name == 'Ice Cream') & (not context.blueprint):
                        if self.ability.extra.chips - self.ability.extra.chip_mod <= 0:G.E_MANAGER.add_event()
                            return {'message': localize(k_melted_ex), 'colour': G.C.CHIPS}
                        else:
                            self.ability.extra.chips = self.ability.extra.chips - self.ability.extra.chip_mod
                            return {'message': localize(), 'colour': G.C.CHIPS}
                    if (self.ability.name == 'Seltzer') & (not context.blueprint):
                        if self.ability.extra - 1 <= 0:G.E_MANAGER.add_event()
                            return {'message': localize(k_drank_ex), 'colour': G.C.FILTER}
                        else:
                            self.ability.extra = self.ability.extra - 1
                            return {'message': self.ability.extra + '', 'colour': G.C.FILTER}
                else:
                    if self.ability.name == 'Loyalty Card':
                        self.ability.loyalty_remaining = self.ability.extra.every - 1 - (G.GAME.hands_played - self.ability.hands_played_at_create) % self.ability.extra.every + 1
                        if context.blueprint:
                            if self.ability.loyalty_remaining == self.ability.extra.every:
                                return {'message': localize(), 'Xmult_mod': self.ability.extra.Xmult}
                        elif self.ability.loyalty_remaining == 0:
                            eval = lambda card: 
                            return card.ability.loyalty_remaining == 0juice_card_until(self, eval, True)
                        elif self.ability.loyalty_remaining == self.ability.extra.every:
                            return {'message': localize(), 'Xmult_mod': self.ability.extra.Xmult}
                    if (self.ability.name != 'Seeing Double') & (self.ability.x_mult > 1) & (self.ability.type == '' if self.ability.type == '' else next(self.ability.type[context.poker_hands])):
                        return {'message': localize(), 'colour': G.C.RED, 'Xmult_mod': self.ability.x_mult}
                    if (self.ability.t_mult > 0) & next(self.ability.type[context.poker_hands]):
                        return {'message': localize(), 'mult_mod': self.ability.t_mult}
                    if (self.ability.t_chips > 0) & next(self.ability.type[context.poker_hands]):
                        return {'message': localize(), 'chip_mod': self.ability.t_chips}
                    if (self.ability.name == 'Half Joker') & len(context.full_hand <= self.ability.extra.size):
                        return {'message': localize(), 'mult_mod': self.ability.extra.mult}
                    if self.ability.name == 'Abstract Joker':
                        x = 0
                        for i in range(1, len(G.jokers.cards), ):
                            if 'i[G.jokers.cards]'.ability.set == 'Joker':
                                x = x + 1
                        return {'message': localize(), 'mult_mod': x * self.ability.extra}
                    if (self.ability.name == 'Acrobat') & (G.GAME.current_round.hands_left == 0):
                        return {'message': localize(), 'Xmult_mod': self.ability.extra}
                    if (self.ability.name == 'Mystic Summit') & (G.GAME.current_round.discards_left == self.ability.extra.d_remaining):
                        return {'message': localize(), 'mult_mod': self.ability.extra.mult}
                    if self.ability.name == 'Misprint':
                        temp_Mult = pseudorandom(misprint)
                        return {'message': localize(), 'mult_mod': temp_Mult}
                    if (self.ability.name == 'Banner') & (G.GAME.current_round.discards_left > 0):
                        return {'message': localize(), 'chip_mod': G.GAME.current_round.discards_left * self.ability.extra}
                    if self.ability.name == 'Stuntman':
                        return {'message': localize(), 'chip_mod': self.ability.extra.chip_mod}
                    if self.ability.name == 'Matador':
                        if G.GAME.blind.triggered:ease_dollars()
                            G.GAME.dollar_buffer = (G.GAME.dollar_buffer if G.GAME.dollar_buffer else 0) + self.ability.extraG.E_MANAGER.add_event()
                            return {'message': localize($) + self.ability.extra, 'dollars': self.ability.extra, 'colour': G.C.MONEY}
                    if self.ability.name == 'Supernova':
                        return {'message': localize(), 'mult_mod': 'context.scoring_name[G.GAME.hands]'.played}
                    if (self.ability.name == 'Ceremonial Dagger') & (self.ability.mult > 0):
                        return {'message': localize(), 'mult_mod': self.ability.mult}
                    if (self.ability.name == 'Vagabond') & len(G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit):
                        if G.GAME.dollars <= self.ability.extra:
                            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1G.E_MANAGER.add_event()
                            return {'message': localize(k_plus_tarot), 'card': self}
                    if (self.ability.name == 'Superposition') & len(G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit):
                        aces = 0
                        for i in range(1, len(context.scoring_hand), ):
                            if 'i[context.scoring_hand]'.get_id() == 14:
                                aces = aces + 1
                        if (aces >= 1) & next("Straight"[context.poker_hands]):
                            card_type = 'Tarot'
                            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1G.E_MANAGER.add_event()
                            return {'message': localize(k_plus_tarot), 'colour': G.C.SECONDARY_SET.Tarot, 'card': self}
                    if (self.ability.name == 'Seance') & len(G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit):
                        if next(self.ability.extra.poker_hand[context.poker_hands]):
                            G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1G.E_MANAGER.add_event()
                            return {'message': localize(k_plus_spectral), 'colour': G.C.SECONDARY_SET.Spectral, 'card': self}
                    if self.ability.name == 'Flower Pot':
                        suits = {'Hearts': 0, 'Diamonds': 0, 'Spades': 0, 'Clubs': 0}
                        for i in range(1, len(context.scoring_hand), ):
                            if 'i[context.scoring_hand]'.ability.name != 'Wild Card':
                                if 'i[context.scoring_hand]'.is_suit(Hearts, True) & ('"Hearts"[suits]' == 0):
                                    '"Hearts"[suits]' = '"Hearts"[suits]' + 1
                                elif 'i[context.scoring_hand]'.is_suit(Diamonds, True) & ('"Diamonds"[suits]' == 0):
                                    '"Diamonds"[suits]' = '"Diamonds"[suits]' + 1
                                elif 'i[context.scoring_hand]'.is_suit(Spades, True) & ('"Spades"[suits]' == 0):
                                    '"Spades"[suits]' = '"Spades"[suits]' + 1
                                elif 'i[context.scoring_hand]'.is_suit(Clubs, True) & ('"Clubs"[suits]' == 0):
                                    '"Clubs"[suits]' = '"Clubs"[suits]' + 1
                        for i in range(1, len(context.scoring_hand), ):
                            if 'i[context.scoring_hand]'.ability.name == 'Wild Card':
                                if 'i[context.scoring_hand]'.is_suit(Hearts) & ('"Hearts"[suits]' == 0):
                                    '"Hearts"[suits]' = '"Hearts"[suits]' + 1
                                elif 'i[context.scoring_hand]'.is_suit(Diamonds) & ('"Diamonds"[suits]' == 0):
                                    '"Diamonds"[suits]' = '"Diamonds"[suits]' + 1
                                elif 'i[context.scoring_hand]'.is_suit(Spades) & ('"Spades"[suits]' == 0):
                                    '"Spades"[suits]' = '"Spades"[suits]' + 1
                                elif 'i[context.scoring_hand]'.is_suit(Clubs) & ('"Clubs"[suits]' == 0):
                                    '"Clubs"[suits]' = '"Clubs"[suits]' + 1
                        if ('"Hearts"[suits]' > 0) & ('"Diamonds"[suits]' > 0) & ('"Spades"[suits]' > 0) & ('"Clubs"[suits]' > 0):
                            return {'message': localize(), 'Xmult_mod': self.ability.extra}
                    if self.ability.name == 'Seeing Double':
                        suits = {'Hearts': 0, 'Diamonds': 0, 'Spades': 0, 'Clubs': 0}
                        for i in range(1, len(context.scoring_hand), ):
                            if 'i[context.scoring_hand]'.ability.name != 'Wild Card':
                                if 'i[context.scoring_hand]'.is_suit(Hearts):
                                    '"Hearts"[suits]' = '"Hearts"[suits]' + 1
                                if 'i[context.scoring_hand]'.is_suit(Diamonds):
                                    '"Diamonds"[suits]' = '"Diamonds"[suits]' + 1
                                if 'i[context.scoring_hand]'.is_suit(Spades):
                                    '"Spades"[suits]' = '"Spades"[suits]' + 1
                                if 'i[context.scoring_hand]'.is_suit(Clubs):
                                    '"Clubs"[suits]' = '"Clubs"[suits]' + 1
                        for i in range(1, len(context.scoring_hand), ):
                            if 'i[context.scoring_hand]'.ability.name == 'Wild Card':
                                if 'i[context.scoring_hand]'.is_suit(Clubs) & ('"Clubs"[suits]' == 0):
                                    '"Clubs"[suits]' = '"Clubs"[suits]' + 1
                                elif 'i[context.scoring_hand]'.is_suit(Diamonds) & ('"Diamonds"[suits]' == 0):
                                    '"Diamonds"[suits]' = '"Diamonds"[suits]' + 1
                                elif 'i[context.scoring_hand]'.is_suit(Spades) & ('"Spades"[suits]' == 0):
                                    '"Spades"[suits]' = '"Spades"[suits]' + 1
                                elif 'i[context.scoring_hand]'.is_suit(Hearts) & ('"Hearts"[suits]' == 0):
                                    '"Hearts"[suits]' = '"Hearts"[suits]' + 1
                        if (('"Hearts"[suits]' > 0 if '"Hearts"[suits]' > 0 else '"Diamonds"[suits]' > 0) if ('"Hearts"[suits]' > 0 if '"Hearts"[suits]' > 0 else '"Diamonds"[suits]' > 0) else '"Spades"[suits]' > 0) & ('"Clubs"[suits]' > 0):
                            return {'message': localize(), 'Xmult_mod': self.ability.extra}
                    if self.ability.name == 'Wee Joker':
                        return {'message': localize(), 'chip_mod': self.ability.extra.chips, 'colour': G.C.CHIPS}
                    if (self.ability.name == 'Castle') & (self.ability.extra.chips > 0):
                        return {'message': localize(), 'chip_mod': self.ability.extra.chips, 'colour': G.C.CHIPS}
                    if (self.ability.name == 'Blue Joker') & len(G.deck.cards > 0):
                        return {'message': localize(), 'chip_mod': self.ability.extra * len(G.deck.cards), 'colour': G.C.CHIPS}
                    if (self.ability.name == 'Erosion') & (G.GAME.starting_deck_size - len(G.playing_cards) > 0):
                        return {'message': localize(), 'mult_mod': self.ability.extra * (G.GAME.starting_deck_size - len(G.playing_cards)), 'colour': G.C.MULT}
                    if self.ability.name == 'Square Joker':
                        return {'message': localize(), 'chip_mod': self.ability.extra.chips, 'colour': G.C.CHIPS}
                    if self.ability.name == 'Runner':
                        return {'message': localize(), 'chip_mod': self.ability.extra.chips, 'colour': G.C.CHIPS}
                    if self.ability.name == 'Ice Cream':
                        return {'message': localize(), 'chip_mod': self.ability.extra.chips, 'colour': G.C.CHIPS}
                    if (self.ability.name == 'Stone Joker') & (self.ability.stone_tally > 0):
                        return {'message': localize(), 'chip_mod': self.ability.extra * self.ability.stone_tally, 'colour': G.C.CHIPS}
                    if (self.ability.name == 'Steel Joker') & (self.ability.steel_tally > 0):
                        return {'message': localize(), 'Xmult_mod': 1 + self.ability.extra * self.ability.steel_tally, 'colour': G.C.MULT}
                    if (self.ability.name == 'Bull') & (G.GAME.dollars + (G.GAME.dollar_buffer if G.GAME.dollar_buffer else 0) > 0):
                        return {'message': localize(), 'chip_mod': self.ability.extra * math.max(0), 'colour': G.C.CHIPS}
                    if self.ability.name == "Driver's License":
                        if (self.ability.driver_tally if self.ability.driver_tally else 0) >= 16:
                            return {'message': localize(), 'Xmult_mod': self.ability.extra}
                    if self.ability.name == 'Blackboard':
                        black_suits = all_cards = (0, 0)
                        for kv in ipairs():
                            all_cards = all_cards + 1
                            if v.is_suit(Clubs, None, True) if v.is_suit(Clubs, None, True) else v.is_suit(Spades, None, True):
                                black_suits = black_suits + 1
                        if black_suits == all_cards:
                            return {'message': localize(), 'Xmult_mod': self.ability.extra}
                    if self.ability.name == 'Joker Stencil':
                        if G.jokers.config.card_limit - len(G.jokers.cards) > 0:
                            return {'message': localize(), 'Xmult_mod': self.ability.x_mult}
                    if (self.ability.name == 'Swashbuckler') & (self.ability.mult > 0):
                        return {'message': localize(), 'mult_mod': self.ability.mult}
                    if self.ability.name == 'Joker':
                        return {'message': localize(), 'mult_mod': self.ability.mult}
                    if (self.ability.name == 'Spare Trousers') & (self.ability.mult > 0):
                        return {'message': localize(), 'mult_mod': self.ability.mult}
                    if (self.ability.name == 'Ride the Bus') & (self.ability.mult > 0):
                        return {'message': localize(), 'mult_mod': self.ability.mult}
                    if (self.ability.name == 'Flash Card') & (self.ability.mult > 0):
                        return {'message': localize(), 'mult_mod': self.ability.mult}
                    if (self.ability.name == 'Popcorn') & (self.ability.mult > 0):
                        return {'message': localize(), 'mult_mod': self.ability.mult}
                    if (self.ability.name == 'Green Joker') & (self.ability.mult > 0):
                        return {'message': localize(), 'mult_mod': self.ability.mult}
                    if (self.ability.name == 'Fortune Teller') & G.GAME.consumeable_usage_total & (G.GAME.consumeable_usage_total.tarot > 0):
                        return {'message': localize(), 'mult_mod': G.GAME.consumeable_usage_total.tarot}
                    if self.ability.name == 'Gros Michel':
                        return {'message': localize(), 'mult_mod': self.ability.extra.mult}
                    if self.ability.name == 'Cavendish':
                        return {'message': localize(), 'Xmult_mod': self.ability.extra.Xmult}
                    if (self.ability.name == 'Red Card') & (self.ability.mult > 0):
                        return {'message': localize(), 'mult_mod': self.ability.mult}
                    if (self.ability.name == 'Card Sharp') & 'context.scoring_name[G.GAME.hands]' & ('context.scoring_name[G.GAME.hands]'.played_this_round > 1):
                        return {'message': localize(), 'Xmult_mod': self.ability.extra.Xmult}
                    if (self.ability.name == 'Bootstraps') & (math.floor() >= 1):
                        return {'message': localize(), 'mult_mod': self.ability.extra.mult * math.floor()}
                    if (self.ability.name == 'Caino') & (self.ability.caino_xmult > 1):
                        return {'message': localize(), 'Xmult_mod': self.ability.caino_xmult}

    def is_suit(self, suit, bypass_debuff, flush_calc):
        if flush_calc:
            if self.ability.effect == 'Stone Card':
                return False
            if (self.ability.name == 'Wild Card') & (not self.debuff):
                return True
            if next() & ((self.base.suit == 'Hearts' if self.base.suit == 'Hearts' else self.base.suit == 'Diamonds') == (suit == 'Hearts' if suit == 'Hearts' else suit == 'Diamonds')):
                return True
            return self.base.suit == suit
        else:
            if self.debuff & (not bypass_debuff):
                return False
            if self.ability.effect == 'Stone Card':
                return False
            if self.ability.name == 'Wild Card':
                return True
            if next() & ((self.base.suit == 'Hearts' if self.base.suit == 'Hearts' else self.base.suit == 'Diamonds') == (suit == 'Hearts' if suit == 'Hearts' else suit == 'Diamonds')):
                return True
            return self.base.suit == suit

    def set_card_area(self, area):
        self.area = area
        self.parent = area
        self.layered_parallax = area.layered_parallax

    def remove_from_area(self):
        self.area = 'None'
        self.parent = 'None'
        self.layered_parallax = {'x': 0, 'y': 0}

    def align(self):
        if self.children.floating_sprite:
            self.children.floating_sprite.T.y = self.T.y
            self.children.floating_sprite.T.x = self.T.x
            self.children.floating_sprite.T.r = self.T.r
        if self.children.focused_ui:self.children.focused_ui.set_alignment()

    def flip(self):
        if self.facing == 'front':
            self.flipping = 'f2b'
            self.facing = 'back'
            self.pinch.x = True
        elif self.facing == 'back':
            self.ability.wheel_flipped = 'None'
            self.flipping = 'b2f'
            self.facing = 'front'
            self.pinch.x = True

    def update(self, dt):
        if self.flipping == 'f2b':
            if self.sprite_facing == 'front' if self.sprite_facing == 'front' else True:
                if self.VT.w <= 0:
                    self.sprite_facing = 'back'
                    self.pinch.x = False
        if self.flipping == 'b2f':
            if self.sprite_facing == 'back' if self.sprite_facing == 'back' else True:
                if self.VT.w <= 0:
                    self.sprite_facing = 'front'
                    self.pinch.x = False
        if (not self.states.focus.is) & self.children.focused_ui:self.children.focused_ui.remove()
            self.children.focused_ui = 'None'self.update_alert()
        if self.ability.consumeable & self.ability.consumeable.max_highlighted:
            self.ability.consumeable.mod_num = math.min(5)
        if G.STAGE == G.STAGES.RUN:
            if self.ability & self.ability.perma_debuff:
                self.debuff = True
            if self.area & (self.area == G.jokers if self.area == G.jokers else self.area == G.consumeables):
                self.bypass_lock = True
                self.bypass_discovery_center = True
                self.bypass_discovery_ui = True
            self.sell_cost_label = (self.facing == 'back') & '?' if (self.facing == 'back') & '?' else self.sell_cost
            if self.ability.name == 'Temperance':
                self.ability.money = 0
                for i in range(1, len(G.jokers.cards), ):
                    if 'i[G.jokers.cards]'.ability.set == 'Joker':
                        self.ability.money = self.ability.money + 'i[G.jokers.cards]'.sell_cost
                self.ability.money = math.min()
            if self.ability.name == 'Throwback':
                self.ability.x_mult = 1 + G.GAME.skips * self.ability.extra
            if self.ability.name == "Driver's License":
                self.ability.driver_tally = 0
                for kv in pairs():
                    if v.config.center != G.P_CENTERS.c_base:
                        self.ability.driver_tally = self.ability.driver_tally + 1
            if self.ability.name == 'Steel Joker':
                self.ability.steel_tally = 0
                for kv in pairs():
                    if v.config.center == G.P_CENTERS.m_steel:
                        self.ability.steel_tally = self.ability.steel_tally + 1
            if self.ability.name == 'Cloud 9':
                self.ability.nine_tally = 0
                for kv in pairs():
                    if v.get_id() == 9:
                        self.ability.nine_tally = self.ability.nine_tally + 1
            if self.ability.name == 'Stone Joker':
                self.ability.stone_tally = 0
                for kv in pairs():
                    if v.config.center == G.P_CENTERS.m_stone:
                        self.ability.stone_tally = self.ability.stone_tally + 1
            if self.ability.name == 'Joker Stencil':
                self.ability.x_mult = G.jokers.config.card_limit - len(G.jokers.cards)
                for i in range(1, len(G.jokers.cards), ):
                    if 'i[G.jokers.cards]'.ability.name == 'Joker Stencil':
                        self.ability.x_mult = self.ability.x_mult + 1
            if self.ability.name == 'The Wheel of Fortune':
                self.eligible_strength_jokers = EMPTY()
                for kv in pairs():
                    if (v.ability.set == 'Joker') & (not v.edition):table.insert()
            if self.ability.name == 'Ectoplasm' if self.ability.name == 'Ectoplasm' else self.ability.name == 'Hex':
                self.eligible_editionless_jokers = EMPTY()
                for kv in pairs():
                    if (v.ability.set == 'Joker') & (not v.edition):table.insert()
            if self.ability.name == 'Blueprint' if self.ability.name == 'Blueprint' else self.ability.name == 'Brainstorm':
                other_joker = 'None'
                if self.ability.name == 'Brainstorm':
                    other_joker = '1[G.jokers.cards]'
                elif self.ability.name == 'Blueprint':
                    for i in range(1, len(G.jokers.cards), ):
                        if 'i[G.jokers.cards]' == self:
                            other_joker = 'i + 1[G.jokers.cards]'
                if other_joker & (other_joker != self) & other_joker.config.center.blueprint_compat:
                    self.ability.blueprint_compat = 'compatible'
                else:
                    self.ability.blueprint_compat = 'incompatible'
            if self.ability.name == 'Swashbuckler':
                sell_cost = 0
                for i in range(1, len(G.jokers.cards), ):
                    if ('i[G.jokers.cards]' != self) & ('i[G.jokers.cards]'.area & ('i[G.jokers.cards]'.area == G.jokers)):
                        sell_cost = sell_cost + 'i[G.jokers.cards]'.sell_cost
                self.ability.mult = sell_cost
        elif self.ability.name == 'Temperance':
            self.ability.money = 0

    def hard_set_T(self, X, Y, W, H):
        x = X if X else self.T.x
        y = Y if Y else self.T.y
        w = W if W else self.T.w
        h = H if H else self.T.h
        super().hard_set_T(self, x, y, w, h)
        if self.children.front:self.children.front.hard_set_T(x, y, w, h)self.children.back.hard_set_T(x, y, w, h)self.children.center.hard_set_T(x, y, w, h)

    def move(self, dt):
        super().move(self, dt)
        if self.children.h_popup:self.children.h_popup.set_alignment()

    def align_h_popup(self):
        focused_ui = self.children.focused_ui & True if self.children.focused_ui & True else False
        popup_direction = (((self.children.buy_button if self.children.buy_button else self.area & self.area.config.view_deck) if (self.children.buy_button if self.children.buy_button else self.area & self.area.config.view_deck) else self.area & (self.area.config.type == 'shop')) & 'cl' if ((self.children.buy_button if self.children.buy_button else self.area & self.area.config.view_deck) if (self.children.buy_button if self.children.buy_button else self.area & self.area.config.view_deck) else self.area & (self.area.config.type == 'shop')) & 'cl' else self.T.y < G.CARD_H * 0.8 & 'bm') if (((self.children.buy_button if self.children.buy_button else self.area & self.area.config.view_deck) if (self.children.buy_button if self.children.buy_button else self.area & self.area.config.view_deck) else self.area & (self.area.config.type == 'shop')) & 'cl' if ((self.children.buy_button if self.children.buy_button else self.area & self.area.config.view_deck) if (self.children.buy_button if self.children.buy_button else self.area & self.area.config.view_deck) else self.area & (self.area.config.type == 'shop')) & 'cl' else self.T.y < G.CARD_H * 0.8 & 'bm') else 'tm'
        return {'major': self.children.focused_ui if self.children.focused_ui else self, 'parent': self, 'xy_bond': 'Strong', 'r_bond': 'Weak', 'wh_bond': 'Weak', 'offset': {'x': ((((popup_direction != 'cl') & 0 if (popup_direction != 'cl') & 0 else focused_ui & -0.05) if ((popup_direction != 'cl') & 0 if (popup_direction != 'cl') & 0 else focused_ui & -0.05) else self.ability.consumeable & 0.0) if (((popup_direction != 'cl') & 0 if (popup_direction != 'cl') & 0 else focused_ui & -0.05) if ((popup_direction != 'cl') & 0 if (popup_direction != 'cl') & 0 else focused_ui & -0.05) else self.ability.consumeable & 0.0) else (self.ability.set == 'Voucher') & 0.0) if ((((popup_direction != 'cl') & 0 if (popup_direction != 'cl') & 0 else focused_ui & -0.05) if ((popup_direction != 'cl') & 0 if (popup_direction != 'cl') & 0 else focused_ui & -0.05) else self.ability.consumeable & 0.0) if (((popup_direction != 'cl') & 0 if (popup_direction != 'cl') & 0 else focused_ui & -0.05) if ((popup_direction != 'cl') & 0 if (popup_direction != 'cl') & 0 else focused_ui & -0.05) else self.ability.consumeable & 0.0) else (self.ability.set == 'Voucher') & 0.0) else -0.05, 'y': ((focused_ui & (((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) if ((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) else 0) if focused_ui & (((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) if ((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) else 0) else (popup_direction == 'tm') & -0.13) if (focused_ui & (((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) if ((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) else 0) if focused_ui & (((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) if ((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) else 0) else (popup_direction == 'tm') & -0.13) else (popup_direction == 'bm') & 0.1) if ((focused_ui & (((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) if ((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) else 0) if focused_ui & (((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) if ((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) else 0) else (popup_direction == 'tm') & -0.13) if (focused_ui & (((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) if ((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) else 0) if focused_ui & (((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) if ((popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) if (popup_direction == 'tm') & (self.area & (self.area == G.hand) & -0.08 if self.area & (self.area == G.hand) & -0.08 else -0.15) else (popup_direction == 'bm') & 0.12) else 0) else (popup_direction == 'tm') & -0.13) else (popup_direction == 'bm') & 0.1) else 0}, 'type': popup_direction}

    def hover(self):self.juice_up(0.05, 0.03)play_sound(paper1)
        if self.states.focus.is & (not self.children.focused_ui):
            self.children.focused_ui = G.UIDEF.card_focus_ui(self)
        if (self.facing == 'front') & (not self.states.drag.is if not self.states.drag.is else G.CONTROLLER.HID.touch) & (not self.no_ui) & (not G.debug_tooltip_toggle):
            if self.children.alert & (not self.config.center.alerted):
                self.config.center.alerted = TrueG.save_progress()
            self.ability_UIBox_table = self.generate_UIBox_ability_table()
            self.config.h_popup = G.UIDEF.card_h_popup(self)
            self.config.h_popup_config = self.align_h_popup()Node.hover(self)

    def stop_hover(self):Node.stop_hover(self)

    def juice_up(self, scale, rot_amount):
        rot_amt = rot_amount & 0.4 * ((math.random() > 0.5) & 1 if (math.random() > 0.5) & 1 else -1) * rot_amount if rot_amount & 0.4 * ((math.random() > 0.5) & 1 if (math.random() > 0.5) & 1 else -1) * rot_amount else ((math.random() > 0.5) & 1 if (math.random() > 0.5) & 1 else -1) * 0.16
        scale = scale & scale * 0.4 if scale & scale * 0.4 else 0.11
        super().juice_up(self, scale, rot_amt)

    def draw(self, layer):
        layer = layer if layer else 'both'
        self.hover_tilt = 1
        if not self.states.visible:
            return False
        if layer == 'shadow' if layer == 'shadow' else layer == 'both':
            self.ARGS.send_to_shader = self.ARGS.send_to_shader if self.ARGS.send_to_shader else {}
            '1[self.ARGS.send_to_shader]' = math.min() + G.TIMERS.REAL / 28 + (self.juice & self.juice.r * 20 if self.juice & self.juice.r * 20 else 0) + self.tilt_var.amt
            '2[self.ARGS.send_to_shader]' = G.TIMERS.REAL
            for kv in pairs():
                v.VT.scale = self.VT.scale
        G.shared_shadow = (self.sprite_facing == 'front') & self.children.center if (self.sprite_facing == 'front') & self.children.center else self.children.back
        if (not self.no_shadow) & (G.SETTINGS.GRAPHICS.shadows == 'On') & ((layer == 'shadow' if layer == 'shadow' else layer == 'both') & ((self.ability.effect != 'Glass Card') & (not self.greyed)) & ((self.area & (self.area != G.discard) & (self.area.config.type != 'deck') if self.area & (self.area != G.discard) & (self.area.config.type != 'deck') else not self.area) if (self.area & (self.area != G.discard) & (self.area.config.type != 'deck') if self.area & (self.area != G.discard) & (self.area.config.type != 'deck') else not self.area) else self.states.drag.is)):
            self.shadow_height = 0 * (0.08 + 0.4 * math.sqrt()) + (((self.highlighted & (self.area == G.play) if self.highlighted & (self.area == G.play) else self.states.drag.is) & 0.35 if (self.highlighted & (self.area == G.play) if self.highlighted & (self.area == G.play) else self.states.drag.is) & 0.35 else self.area & (self.area.config.type == 'title_2') & 0.04) if ((self.highlighted & (self.area == G.play) if self.highlighted & (self.area == G.play) else self.states.drag.is) & 0.35 if (self.highlighted & (self.area == G.play) if self.highlighted & (self.area == G.play) else self.states.drag.is) & 0.35 else self.area & (self.area.config.type == 'title_2') & 0.04) else 0.1)G.shared_shadow.draw_shader(dissolve)
        if (layer == 'card' if layer == 'card' else layer == 'both') & (self.area != G.hand):
            if self.children.focused_ui:self.children.focused_ui.draw()
        if layer == 'card' if layer == 'card' else layer == 'both':
            self.tilt_var = self.tilt_var if self.tilt_var else {'mx': 0, 'my': 0, 'dx': self.tilt_var.dx if self.tilt_var.dx else 0, 'dy': self.tilt_var.dy if self.tilt_var.dy else 0, 'amt': 0}
            tilt_factor = 0.3
            if self.states.focus.is:
                self.tilt_var.mx = self.tilt_var.my = (G.CONTROLLER.cursor_position.x + self.tilt_var.dx * self.T.w * G.TILESCALE * G.TILESIZE, G.CONTROLLER.cursor_position.y + self.tilt_var.dy * self.T.h * G.TILESCALE * G.TILESIZE)
                self.tilt_var.amt = math.abs() * tilt_factor
            elif self.states.hover.is:
                self.tilt_var.mx = self.tilt_var.my = (G.CONTROLLER.cursor_position.x, G.CONTROLLER.cursor_position.y)
                self.tilt_var.amt = math.abs() * tilt_factor
            elif self.ambient_tilt:
                tilt_angle = G.TIMERS.REAL * (1.56 + (self.ID / 1.14212 % 1)) + self.ID / 1.35122
                self.tilt_var.mx = ((0.5 + 0.5 * self.ambient_tilt * math.cos(tilt_angle)) * self.VT.w + self.VT.x + G.ROOM.T.x) * G.TILESIZE * G.TILESCALE
                self.tilt_var.my = ((0.5 + 0.5 * self.ambient_tilt * math.sin(tilt_angle)) * self.VT.h + self.VT.y + G.ROOM.T.y) * G.TILESIZE * G.TILESCALE
                self.tilt_var.amt = self.ambient_tilt * (0.5 + math.cos(tilt_angle)) * tilt_factor
            if self.children.particles:self.children.particles.draw()
            if self.children.price:self.children.price.draw()
            if self.children.buy_button:
                if self.highlighted:
                    self.children.buy_button.states.visible = Trueself.children.buy_button.draw()
                    if self.children.buy_and_use_button:self.children.buy_and_use_button.draw()
                else:
                    self.children.buy_button.states.visible = False
            if self.children.use_button & self.highlighted:self.children.use_button.draw()
            if self.vortex:
                if self.facing == 'back':self.children.back.draw_shader(vortex)
                else:self.children.center.draw_shader(vortex)
                    if self.children.front:self.children.front.draw_shader(vortex)love.graphics.setShader()
            elif self.sprite_facing == 'front':
                if self.edition & self.edition.negative if self.edition & self.edition.negative else (self.ability.name == 'Antimatter') & (self.config.center.discovered if self.config.center.discovered else self.bypass_discovery_center):self.children.center.draw_shader(negative, None)
                    if self.children.front & (self.ability.effect != 'Stone Card'):self.children.front.draw_shader(negative, None)
                elif not self.greyed:self.children.center.draw_shader(dissolve)
                    if self.children.front & (self.ability.effect != 'Stone Card'):self.children.front.draw_shader(dissolve)
                if (not self.config.center.discovered) & (self.ability.consumeable if self.ability.consumeable else self.config.center.unlocked) & (not self.config.center.demo) & (not self.bypass_discovery_center):
                    shared_sprite = (self.ability.set == 'Edition' if self.ability.set == 'Edition' else self.ability.set == 'Joker') & G.shared_undiscovered_joker if (self.ability.set == 'Edition' if self.ability.set == 'Edition' else self.ability.set == 'Joker') & G.shared_undiscovered_joker else G.shared_undiscovered_tarot
                    scale_mod = -0.05 + 0.05 * math.sin()
                    rotate_mod = 0.03 * math.sin()
                    shared_sprite.role.draw_major = selfshared_sprite.draw_shader(dissolve, None, None, None)
                if (self.ability.name == 'Invisible Joker') & (self.config.center.discovered if self.config.center.discovered else self.bypass_discovery_center):self.children.center.draw_shader(voucher, None)
                if ((((((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') if (((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') else self.ability.set == 'Voucher') if ((((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') if (((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') else self.ability.set == 'Voucher') else self.ability.set == 'Booster') if (((((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') if (((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') else self.ability.set == 'Voucher') if ((((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') if (((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') else self.ability.set == 'Voucher') else self.ability.set == 'Booster') else self.config.center.soul_pos) if ((((((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') if (((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') else self.ability.set == 'Voucher') if ((((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') if (((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') else self.ability.set == 'Voucher') else self.ability.set == 'Booster') if (((((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') if (((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') else self.ability.set == 'Voucher') if ((((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') if (((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) if ((((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) if (((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') if ((((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) if (((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) if ((((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) if (((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) if ((self.edition if self.edition else self.seal) if (self.edition if self.edition else self.seal) else self.ability.eternal) else self.ability.rental) else self.ability.perishable) else self.sticker) else self.ability.set == 'Spectral') else self.debuff) else self.greyed) else self.ability.name == 'The Soul') else self.ability.set == 'Voucher') else self.ability.set == 'Booster') else self.config.center.soul_pos) else self.config.center.demo:
                    if (self.ability.set == 'Voucher' if self.ability.set == 'Voucher' else self.config.center.demo) & (self.ability.name != 'Antimatter' if self.ability.name != 'Antimatter' else not (self.config.center.discovered if self.config.center.discovered else self.bypass_discovery_center)):self.children.center.draw_shader(voucher, None)
                    if self.ability.set == 'Booster' if self.ability.set == 'Booster' else self.ability.set == 'Spectral':self.children.center.draw_shader(booster, None)
                    if self.edition & self.edition.holo:self.children.center.draw_shader(holo, None)
                        if self.children.front & (self.ability.effect != 'Stone Card'):self.children.front.draw_shader(holo, None)
                    if self.edition & self.edition.foil:self.children.center.draw_shader(foil, None)
                        if self.children.front & (self.ability.effect != 'Stone Card'):self.children.front.draw_shader(foil, None)
                    if self.edition & self.edition.polychrome:self.children.center.draw_shader(polychrome, None)
                        if self.children.front & (self.ability.effect != 'Stone Card'):self.children.front.draw_shader(polychrome, None)
                    if self.edition & self.edition.negative if self.edition & self.edition.negative else (self.ability.name == 'Antimatter') & (self.config.center.discovered if self.config.center.discovered else self.bypass_discovery_center):self.children.center.draw_shader(negative_shine, None)
                    if self.seal:
                        'self.seal[G.shared_seals]'.role.draw_major = self'self.seal[G.shared_seals]'.draw_shader(dissolve, None, None, None)
                        if self.seal == 'Gold':'self.seal[G.shared_seals]'.draw_shader(voucher, None)
                    if self.ability.eternal:
                        G.shared_sticker_eternal.role.draw_major = selfG.shared_sticker_eternal.draw_shader(dissolve, None, None, None)G.shared_sticker_eternal.draw_shader(voucher, None)
                    if self.ability.perishable:
                        G.shared_sticker_perishable.role.draw_major = selfG.shared_sticker_perishable.draw_shader(dissolve, None, None, None)G.shared_sticker_perishable.draw_shader(voucher, None)
                    if self.ability.rental:
                        G.shared_sticker_rental.role.draw_major = selfG.shared_sticker_rental.draw_shader(dissolve, None, None, None)G.shared_sticker_rental.draw_shader(voucher, None)
                    if self.sticker & 'self.sticker[G.shared_stickers]':
                        'self.sticker[G.shared_stickers]'.role.draw_major = self'self.sticker[G.shared_stickers]'.draw_shader(dissolve, None, None, None)'self.sticker[G.shared_stickers]'.draw_shader(voucher, None)
                    if (self.ability.name == 'The Soul') & (self.config.center.discovered if self.config.center.discovered else self.bypass_discovery_center):
                        scale_mod = 0.05 + 0.05 * math.sin() + 0.07 * math.sin() * (1 - (G.TIMERS.REAL - math.floor()) ** 3)
                        rotate_mod = 0.1 * math.sin() + 0.07 * math.sin() * (1 - (G.TIMERS.REAL - math.floor()) ** 2)
                        G.shared_soul.role.draw_major = selfG.shared_soul.draw_shader(dissolve, 0, None, None)G.shared_soul.draw_shader(dissolve, None, None, None)
                    if self.config.center.soul_pos & (self.config.center.discovered if self.config.center.discovered else self.bypass_discovery_center):
                        scale_mod = 0.07 + 0.02 * math.sin() + 0.0 * math.sin() * (1 - (G.TIMERS.REAL - math.floor()) ** 3)
                        rotate_mod = 0.05 * math.sin() + 0.0 * math.sin() * (1 - (G.TIMERS.REAL - math.floor()) ** 2)
                        if self.ability.name == 'Hologram':
                            self.hover_tilt = self.hover_tilt * 1.5self.children.floating_sprite.draw_shader(hologram, None)
                            self.hover_tilt = self.hover_tilt / 1.5
                        else:self.children.floating_sprite.draw_shader(dissolve, 0, None, None)self.children.floating_sprite.draw_shader(dissolve, None, None, None)
                    if self.debuff:self.children.center.draw_shader(debuff, None)
                        if self.children.front & (self.ability.effect != 'Stone Card'):self.children.front.draw_shader(debuff, None)
                    if self.greyed:self.children.center.draw_shader(played, None)
                        if self.children.front & (self.ability.effect != 'Stone Card'):self.children.front.draw_shader(played, None)
            elif self.sprite_facing == 'back':
                overlay = G.C.WHITE
                if self.area & (self.area.config.type == 'deck') & (self.rank > 3):
                    self.back_overlay = self.back_overlay if self.back_overlay else {}
                    '1[self.back_overlay]' = 0.5 + (len(self.area.cards - self.rank) % 7) / 50
                    '2[self.back_overlay]' = 0.5 + (len(self.area.cards - self.rank) % 7) / 50
                    '3[self.back_overlay]' = 0.5 + (len(self.area.cards - self.rank) % 7) / 50
                    '4[self.back_overlay]' = 1
                    overlay = self.back_overlay
                if self.area & (self.area.config.type == 'deck'):self.children.back.draw(overlay)
                else:self.children.back.draw_shader(dissolve)
                if self.sticker & 'self.sticker[G.shared_stickers]':
                    'self.sticker[G.shared_stickers]'.role.draw_major = self'self.sticker[G.shared_stickers]'.draw_shader(dissolve, None, None, True)
                    if self.sticker == 'Gold':'self.sticker[G.shared_stickers]'.draw_shader(voucher, None)
            for kv in pairs():
                if (k != 'focused_ui') & (k != 'front') & (k != 'back') & (k != 'soul_parts') & (k != 'center') & (k != 'floating_sprite') & (k != 'shadow') & (k != 'use_button') & (k != 'buy_button') & (k != 'buy_and_use_button') & (k != 'debuff') & (k != 'price') & (k != 'particles') & (k != 'h_popup'):v.draw()
            if (layer == 'card' if layer == 'card' else layer == 'both') & (self.area == G.hand):
                if self.children.focused_ui:self.children.focused_ui.draw()add_to_drawhash(self)self.draw_boundingrect()

    def release(self, dragged):
        if dragged.is(Card) & self.area:self.area.release(dragged)

    def highlight(self, is_higlighted):
        self.highlighted = is_higlighted
        if (self.ability.consumeable if self.ability.consumeable else self.ability.set == 'Joker') if (self.ability.consumeable if self.ability.consumeable else self.ability.set == 'Joker') else self.area & (self.area == G.pack_cards):
            if self.highlighted & self.area & (self.area.config.type != 'shop'):
                x_off = self.ability.consumeable & -0.1 if self.ability.consumeable & -0.1 else 0
                self.children.use_button = UIBox()
            elif self.children.use_button:self.children.use_button.remove()
                self.children.use_button = 'None'
        if self.ability.consumeable if self.ability.consumeable else self.ability.set == 'Joker':
            if (not self.highlighted) & self.area & (self.area.config.type == 'joker') & len(G.jokers.cards >= G.jokers.config.card_limit if G.jokers.cards >= G.jokers.config.card_limit else self.edition & self.edition.negative):
                if G.shop_jokers:G.shop_jokers.unhighlight_all()

    def click(self):
        if self.area & self.area.can_highlight(self):
            if (self.area == G.hand) & (G.STATE == G.STATES.HAND_PLAYED):
                return False
            if self.highlighted != True:self.area.add_to_highlighted(self)
            else:self.area.remove_from_highlighted(self)play_sound(cardSlide2, None, 0.3)
        if self.area & (self.area == G.deck) & ('1[self.area.cards]' == self):G.FUNCS.deck_info()

    def save(self):
        cardTable = {'sort_id': self.sort_id, 'save_fields': {'center': self.config.center_key, 'card': self.config.card_key}, 'params': self.params, 'no_ui': self.no_ui, 'base_cost': self.base_cost, 'extra_cost': self.extra_cost, 'cost': self.cost, 'sell_cost': self.sell_cost, 'facing': self.facing, 'sprite_facing': self.facing, 'flipping': 'None', 'highlighted': self.highligted, 'debuff': self.debuff, 'rank': self.rank, 'added_to_deck': self.added_to_deck, 'label': self.label, 'playing_card': self.playing_card, 'base': self.base, 'ability': self.ability, 'pinned': self.pinned, 'edition': self.edition, 'seal': self.seal, 'bypass_discovery_center': self.bypass_discovery_center, 'bypass_discovery_ui': self.bypass_discovery_ui, 'bypass_lock': self.bypass_lock}
        return cardTable

    def load(self, cardTable, other_card):
        scale = 1
        self.config = {}
        self.config.center_key = cardTable.save_fields.center
        self.config.center = 'self.config.center_key[G.P_CENTERS]'
        self.params = cardTable.params
        H = G.CARD_H
        W = G.CARD_W
        if self.config.center.name == 'Half Joker':
            self.T.h = H * scale / 1.7 * scale
            self.T.w = W * scale
        elif self.config.center.name == 'Wee Joker':
            self.T.h = H * scale * 0.7 * scale
            self.T.w = W * scale * 0.7 * scale
        elif self.config.center.name == 'Photograph':
            self.T.h = H * scale / 1.2 * scale
            self.T.w = W * scale
        elif self.config.center.name == 'Square Joker':
            H = W
            self.T.h = H * scale
            self.T.w = W * scale
        elif self.config.center.set == 'Booster':
            self.T.h = H * 1.27
            self.T.w = W * 1.27
        else:
            self.T.h = H * scale
            self.T.w = W * scale
        self.VT.h = self.T.H
        self.VT.w = self.T.w
        self.config.card_key = cardTable.save_fields.card
        self.config.card = 'self.config.card_key[G.P_CARDS]'
        self.no_ui = cardTable.no_ui
        self.base_cost = cardTable.base_cost
        self.extra_cost = cardTable.extra_cost
        self.cost = cardTable.cost
        self.sell_cost = cardTable.sell_cost
        self.facing = cardTable.facing
        self.sprite_facing = cardTable.sprite_facing
        self.flipping = cardTable.flipping
        self.highlighted = cardTable.highlighted
        self.debuff = cardTable.debuff
        self.rank = cardTable.rank
        self.added_to_deck = cardTable.added_to_deck
        self.label = cardTable.label
        self.playing_card = cardTable.playing_card
        self.base = cardTable.base
        self.sort_id = cardTable.sort_id
        self.bypass_discovery_center = cardTable.bypass_discovery_center
        self.bypass_discovery_ui = cardTable.bypass_discovery_ui
        self.bypass_lock = cardTable.bypass_lock
        self.ability = cardTable.ability
        self.pinned = cardTable.pinned
        self.edition = cardTable.edition
        self.seal = cardTable.sealremove_all()
        self.children = {}
        self.children.shadow = Moveable(0, 0, 0, 0)self.set_sprites()

    def remove(self):
        self.removed = True
        if self.area:self.area.remove_card(self)self.remove_from_deck()
        if self.ability.queue_negative_removal:
            if self.ability.consumeable:
                G.consumeables.config.card_limit = G.consumeables.config.card_limit - 1
            else:
                G.jokers.config.card_limit = G.jokers.config.card_limit - 1
        if not G.OVERLAY_MENU:
            for kv in pairs():
                if v.name == self.ability.name:
                    if not next():
                        'k[G.GAME.used_jokers]' = 'None'
        if G.playing_cards:
            for kv in ipairs():
                if v == self:table.remove()
                    break
            for kv in ipairs():
                v.playing_card = kremove_all()
        for kv in pairs():
            if v == self:table.remove()
        super().remove(self)